// SPDX-License-Identifier: MIT

pragma solidity ^0.8.9;

import "./Ownable.sol";

import "./ContextMixin.sol";
import "./NativeMetaTransaction.sol";

import "./ERC721Enumerable.sol";
import "./AccessControlEnumerable.sol";
import "./MerkleProof.sol";
import "./Counters.sol";
import "./ReentrancyGuard.sol";

contract OwnableDelegateProxy {}

contract ProxyRegistry {
    mapping(address => OwnableDelegateProxy) public proxies;
}

/**
  ERC721 with support for OpenSea proxy contract approval and meta transactions
 */
contract Alienators is ContextMixin, NativeMetaTransaction, Ownable, AccessControlEnumerable, ERC721Enumerable, ReentrancyGuard {
    address proxyRegistryAddress;

    using Counters for Counters.Counter;

    uint256 public constant MAX_SUPPLY = 14;
    uint8 public constant MAX_WHITELISTED_CLAIMS = 3;
    uint256 public constant MINT_COST = 0.01 ether;
    address payable private constant MINT_VAULT = payable(0xF4e2Bc18464670a684Bb8Ce2F5663c543Db402c3);

    // tracks users who claimed the drop
    mapping(address => uint8) public claims;

    // Is public minting?
    bool public openMint;

    bytes32 public immutable merkleRoot;

    Counters.Counter private tokenIdTracker;

    string private baseTokenURI;

    bool private revealed;

    constructor(
        string memory _name,
        string memory _symbol,
        string memory _baseTokenURI,
        bytes32 _merkleRoot,
        address _proxyRegistryAddress
    ) ERC721(_name, _symbol) {
        baseTokenURI = _baseTokenURI;
        merkleRoot = _merkleRoot;

        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);

        // Start with token ID 1.
        tokenIdTracker.increment();

        proxyRegistryAddress = _proxyRegistryAddress;
        _initializeEIP712(_name);
    }

    /**
     * Override isApprovedForAll to whitelist user's OpenSea proxy accounts to enable gas-less listings.
     */
    function isApprovedForAll(address owner, address operator)
        override(ERC721)
        public
        view
        returns (bool)
    {
        // Whitelist OpenSea proxy contract for easy trading.
        ProxyRegistry proxyRegistry = ProxyRegistry(proxyRegistryAddress);
        if (address(proxyRegistry.proxies(owner)) == operator) {
            return true;
        }

        return super.isApprovedForAll(owner, operator);
    }

    function _baseURI() internal view virtual override returns (string memory) {
        return baseTokenURI;
    }

    // WARNING: Can only be called once
    function reveal(string memory _baseTokenURI) external onlyOwner {
        require(!revealed);
        revealed = true;

        baseTokenURI = _baseTokenURI;
    }

    function mintPublic(uint8 quantity) external virtual payable nonReentrant {
        _mint(msg.sender, quantity, new bytes32[](0));
    }

    function mintWhitelist(uint8 quantity, bytes32[] calldata merkleProof) external virtual payable nonReentrant {
        _mint(msg.sender, quantity, merkleProof);
    }

    /**
     * @dev Creates a new token for `to`. Its token ID will be automatically
     * assigned (and available on the emitted {IERC721-Transfer} event), and the token
     * URI autogenerated based on the base URI passed at construction.
     *
     * See {ERC721-_mint}.
     *
     */
    function _mint(address to, uint8 quantity, bytes32[] memory merkleProof) private {
        require(quantity > 0, 'Minter: Quantity must be > 0');
        require(msg.value >= MINT_COST * quantity, 'Minter: Not enough ether');
        require(totalSupply() < MAX_SUPPLY, 'Minter: Collection is fully minted');
        require(hasClaimed(msg.sender) + quantity <= MAX_WHITELISTED_CLAIMS, 'Minter: Max minting reached');

        if (!openMint) {
            // Verify the merkle proof.
            bytes32 node = keccak256(abi.encodePacked(msg.sender));
            require(openMint || MerkleProof.verify(merkleProof, merkleRoot, node), 'Minter: Invalid proof');
        }

        for (uint8 i = 0; i < quantity; i++) {
            // Mark it claimed and send the token.
            claims[msg.sender]++;

            // We cannot just use balanceOf to create the new tokenId because tokens
            // can be burned (destroyed), so we need a separate counter.
            _mint(to, tokenIdTracker.current());
            tokenIdTracker.increment();
        }

        (bool sent, /*bytes memory data*/) = MINT_VAULT.call{value: msg.value}("");
        require(sent, "Failed to send Ether");
    }

    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 tokenId
    ) internal virtual override(ERC721Enumerable) {
        super._beforeTokenTransfer(from, to, tokenId);
    }

    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId)
        public
        view
        virtual
        override(AccessControlEnumerable, ERC721Enumerable)
        returns (bool)
    {
        return super.supportsInterface(interfaceId);
    }

    function hasClaimed(address user) public view returns (uint8) {
        return claims[user];
    }

    // Opens public minting
    function open() external onlyOwner {
        openMint = true;
    }

    // Closes public minting
    function close() external onlyOwner {
        openMint = false;
    }

    /**
     * This is used instead of msg.sender as transactions won't be sent by the original token owner, but by OpenSea.
     */
    function _msgSender()
        internal
        override
        view
        returns (address sender)
    {
        return ContextMixin.msgSender();
    }
}
