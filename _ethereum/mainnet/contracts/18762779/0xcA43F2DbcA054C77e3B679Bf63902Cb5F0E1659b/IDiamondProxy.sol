// SPDX-License-Identifier: MIT
pragma solidity >=0.8.20;

/// ------------------------------------------------------------------------------------------------------------
///
/// NOTE: This file is auto-generated by Gemforge.
///
/// ------------------------------------------------------------------------------------------------------------

import "./IDiamondCut.sol";
import "./IDiamondLoupe.sol";
import "./IERC173.sol";
import "./IERC165.sol";
import "./FreeStructs.sol";


interface IDiamondProxy is
    IERC173,
    IERC165,
    IDiamondCut,
    IDiamondLoupe
{
function assignRole(bytes32 _objectId, bytes32 _contextId, string memory _role) external;
function unassignRole(bytes32 _objectId, bytes32 _contextId) external;
function isInGroup(bytes32 _objectId, bytes32 _contextId, string memory _group) external view returns (bool);
function isParentInGroup(bytes32 _objectId, bytes32 _contextId, string memory _group) external view returns (bool);
function canAssign(bytes32 _assignerId, bytes32 _objectId, bytes32 _contextId, string memory _role) external view returns (bool);
function hasGroupPrivilege(bytes32 _userId, bytes32 _contextId, bytes32 _groupId) external view returns (bool);
function getRoleInContext(bytes32 objectId, bytes32 contextId) external view returns (bytes32);
function isRoleInGroup(string memory role, string memory group) external view returns (bool);
function canGroupAssignRole(string memory role, string memory group) external view returns (bool);
function updateRoleAssigner(string memory _role, string memory _assignerGroup) external;
function updateRoleGroup(string memory _role, string memory _group, bool _roleInGroup) external;
function setMaxDividendDenominations(uint8 _newMax) external;
function getMaxDividendDenominations() external view returns (uint8);
function isSupportedExternalToken(bytes32 _tokenId) external view returns (bool);
function addSupportedExternalToken(address _tokenAddress, uint256 _minimumSell) external;
function getSupportedExternalTokens() external view returns (address[] memory);
function getSystemId() external pure returns (bytes32);
function isObjectTokenizable(bytes32 _objectId) external view returns (bool);
function lockFunction(bytes4 functionSelector) external;
function unlockFunction(bytes4 functionSelector) external;
function isFunctionLocked(bytes4 functionSelector) external view returns (bool);
function lockAllFundTransferFunctions() external;
function unlockAllFundTransferFunctions() external;
function replaceMakerBP(uint16 _newMakerBP) external;
function addFeeSchedule(bytes32 _entityId, uint256 _feeScheduleType, bytes32[] calldata _receiver, uint16[] calldata _basisPoints) external;
function removeFeeSchedule(bytes32 _entityId, uint256 _feeScheduleType) external;
function facets() external view returns (Facet[] memory facets_);
function facetFunctionSelectors(address _facet) external view returns (bytes4[] memory _facetFunctionSelectors);
function facetAddresses() external view returns (address[] memory facetAddresses_);
function facetAddress(bytes4 _functionSelector) external view returns (address facetAddress_);
function supportsInterface(bytes4 _interfaceId) external view returns (bool);
function domainSeparatorV4() external view returns (bytes32);
function hashTypedDataV4(bytes32 structHash) external view returns (bytes32);
function createSimplePolicy(bytes32 _policyId, bytes32 _entityId, Stakeholders calldata _stakeholders, SimplePolicy calldata _simplePolicy, bytes32 _dataHash) external;
function enableEntityTokenization(bytes32 _objectId, string memory _symbol, string memory _name, uint256 _minimumSell) external;
function updateEntityTokenInfo(bytes32 _entityId, string memory _symbol, string memory _name) external;
function startTokenSale(bytes32 _entityId, uint256 _amount, uint256 _totalPrice) external;
function isTokenWrapped(bytes32 _entityId) external view returns (bool);
function updateEntity(bytes32 _entityId, Entity calldata _updateEntity) external;
function getEntityInfo(bytes32 _entityId) external view returns (Entity memory);
function getFeeSchedule(bytes32 _entityId, uint256 _feeScheduleType) external view returns (FeeSchedule memory);
function getObjectTokenSymbol(bytes32 _objectId) external view returns (string memory);
function isDiamondInitialized() external view returns (bool);
function calculateUpgradeId(IDiamondCut.FacetCut[] calldata _diamondCut, address _init, bytes calldata _calldata) external pure returns (bytes32);
function createUpgrade(bytes32 id) external;
function updateUpgradeExpiration(uint256 duration) external;
function cancelUpgrade(bytes32 id) external;
function getUpgrade(bytes32 id) external view returns (uint256 expiry);
function getUpgradeExpiration() external view returns (uint256 upgradeExpiration);
function cancelOffer(uint256 _offerId) external;
function executeLimitOffer(bytes32 _sellToken, uint256 _sellAmount, bytes32 _buyToken, uint256 _buyAmount) external returns (uint256 offerId_, uint256 buyTokenCommissionsPaid_, uint256 sellTokenCommissionsPaid_);
function getLastOfferId() external view returns (uint256);
function getBestOfferId(bytes32 _sellToken, bytes32 _buyToken) external view returns (uint256);
function getOffer(uint256 _offerId) external view returns (MarketInfo memory _offerState);
function isActiveOffer(uint256 _offerId) external view returns (bool);
function calculateTradingFees(bytes32 _buyerId, bytes32 _sellToken, bytes32 _buyToken, uint256 _buyAmount) external view returns (uint256 totalFees_, uint256 totalBP_);
function getMakerBP() external view returns (uint16);
function objectMinimumSell(bytes32 _objectId) external view returns (uint256);
function setMinimumSell(bytes32 _objectId, uint256 _minimumSell) external;
function transferOwnership(address _newOwner) external;
function owner() external view returns (address owner_);
function totalSupply() external view returns (uint256);
function balanceOf(address addr) external view returns (uint256);
function diamondCut(FacetCut[] calldata _diamondCut, address _init, bytes calldata _calldata) external;
function paySimplePremium(bytes32 _policyId, uint256 _amount) external;
function paySimpleClaim(bytes32 _claimId, bytes32 _policyId, bytes32 _insuredId, uint256 _amount) external;
function getSimplePolicyInfo(bytes32 _policyId) external view returns (SimplePolicyInfo memory);
function getPolicyCommissionReceivers(bytes32 _id) external view returns (bytes32[] memory commissionReceivers);
function checkAndUpdateSimplePolicyState(bytes32 _policyId) external;
function cancelSimplePolicy(bytes32 _policyId) external;
function getSigningHash(uint256 _startDate, uint256 _maturationDate, bytes32 _asset, uint256 _limit, bytes32 _offchainDataHash) external view returns (bytes32 signingHash_);
function calculatePremiumFees(bytes32 _policyId, uint256 _premiumPaid) external view returns (CalculatedFees memory cf);
function createEntity(bytes32 _entityId, bytes32 _entityAdmin, Entity calldata _entityData, bytes32 _dataHash) external;
function stringToBytes32(string memory _strIn) external pure returns (bytes32 result);
function isObject(bytes32 _id) external view returns (bool);
function getObjectMeta(bytes32 _id) external view returns (bytes32 parent, bytes32 dataHash, string memory tokenSymbol, string memory tokenName, address tokenWrapper);
function wrapToken(bytes32 _objectId) external;
function getObjectType(bytes32 _objectId) external pure returns (bytes12);
function isObjectType(bytes32 _objectId, bytes12 _objectType) external pure returns (bool);
function internalBalanceOf(bytes32 ownerId, bytes32 tokenId) external view returns (uint256);
function internalTokenSupply(bytes32 tokenId) external view returns (uint256);
function internalTransferFromEntity(bytes32 to, bytes32 tokenId, uint256 amount) external;
function wrapperInternalTransferFrom(bytes32 from, bytes32 to, bytes32 tokenId, uint256 amount) external;
function internalBurn(bytes32 from, bytes32 tokenId, uint256 amount) external;
function getWithdrawableDividend(bytes32 ownerId, bytes32 tokenId, bytes32 dividendTokenId) external view returns (uint256);
function withdrawDividend(bytes32 ownerId, bytes32 tokenId, bytes32 dividendTokenId) external;
function withdrawAllDividends(bytes32 ownerId, bytes32 tokenId) external;
function payDividendFromEntity(bytes32 guid, uint256 amount) external;
function getLockedBalance(bytes32 _entityId, bytes32 _tokenId) external view returns (uint256 amount);
function internalTransferBySystemAdmin(bytes32 _fromEntityId, bytes32 _toEntityId, bytes32 _tokenId, uint256 _amount) external;
function totalDividends(bytes32 _tokenId, bytes32 _dividendDenominationId) external view returns (uint256);
function externalDeposit(address _externalTokenAddress, uint256 _amount) external;
function externalWithdrawFromEntity(bytes32 _entityId, address _receiver, address _externalTokenAddress, uint256 _amount) external;
function getUserIdFromAddress(address addr) external pure returns (bytes32 userId);
function getAddressFromExternalTokenId(bytes32 _externalTokenId) external pure returns (address tokenAddress);
function setEntity(bytes32 _userId, bytes32 _entityId) external;
function getEntity(bytes32 _userId) external view returns (bytes32 entityId);
}
