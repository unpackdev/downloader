// SPDX-License-Identifier: Apache-2.0

// Generated by impl.ts. Will be overwritten.
// Filename: './BaseCedarERC1155DropV5.sol'

pragma solidity ^0.8.4;

import "./ICedarERC1155Drop.sol";
import "./ICedarFeatures.sol";
import "./ICedarVersioned.sol";
import "./IMulticallable.sol";
import "./ICedarSFTIssuance.sol";
import "./ISFTSupply.sol";
import "./IERC1155.sol";
import "./IERC2981.sol";
import "./IRoyalty.sol";
import "./ICedarUpdateBaseURI.sol";
import "./IContractMetadata.sol";
import "./ICedarSFTMetadata.sol";
import "./ICedarAgreement.sol";
import "./IPrimarySale.sol";
import "./ICedarAgreement.sol";
import "./ICedarSFTIssuance.sol";
import "./ICedarLazyMint.sol";
import "./ICedarPausable.sol";
import "./IContractMetadata.sol";
import "./ICedarUpdateBaseURI.sol";
import "./IRoyalty.sol";
import "./IPrimarySale.sol";
import "./ISFTLimitSupply.sol";

/// Delegate features
interface IDelegateBaseCedarERC1155DropV5 is IRestrictedAgreementV0, IRestrictedSFTIssuanceV0, IRestrictedLazyMintV0, IRestrictedPausableV0, IRestrictedMetadataV0, IRestrictedUpdateBaseURIV0, IRestrictedRoyaltyV0, IRestrictedPrimarySaleV1, IRestrictedSFTLimitSupplyV0 {}

/// Inherit from this base to implement introspection
abstract contract BaseCedarERC1155DropV5 is ICedarFeaturesV0, ICedarVersionedV2, IMulticallableV0, IPublicSFTIssuanceV0, ISFTSupplyV0, IERC1155V1, IERC2981V0, IPublicRoyaltyV0, IPublicUpdateBaseURIV0, IPublicMetadataV0, ICedarSFTMetadataV1, IPublicAgreementV0, IPublicPrimarySaleV1 {
    function supportedFeatures() override public pure returns (string[] memory features) {
        features = new string[](20);
        features[0] = "ICedarFeatures.sol:ICedarFeaturesV0";
        features[1] = "ICedarVersioned.sol:ICedarVersionedV2";
        features[2] = "IMulticallable.sol:IMulticallableV0";
        features[3] = "issuance/ICedarSFTIssuance.sol:IPublicSFTIssuanceV0";
        features[4] = "issuance/ISFTSupply.sol:ISFTSupplyV0";
        features[5] = "royalties/IRoyalty.sol:IPublicRoyaltyV0";
        features[6] = "baseURI/ICedarUpdateBaseURI.sol:IPublicUpdateBaseURIV0";
        features[7] = "metadata/IContractMetadata.sol:IPublicMetadataV0";
        features[8] = "metadata/ICedarSFTMetadata.sol:ICedarSFTMetadataV1";
        features[9] = "agreement/ICedarAgreement.sol:IPublicAgreementV0";
        features[10] = "primarysale/IPrimarySale.sol:IPublicPrimarySaleV1";
        features[11] = "agreement/ICedarAgreement.sol:IRestrictedAgreementV0";
        features[12] = "issuance/ICedarSFTIssuance.sol:IRestrictedSFTIssuanceV0";
        features[13] = "lazymint/ICedarLazyMint.sol:IRestrictedLazyMintV0";
        features[14] = "pausable/ICedarPausable.sol:IRestrictedPausableV0";
        features[15] = "metadata/IContractMetadata.sol:IRestrictedMetadataV0";
        features[16] = "baseURI/ICedarUpdateBaseURI.sol:IRestrictedUpdateBaseURIV0";
        features[17] = "royalties/IRoyalty.sol:IRestrictedRoyaltyV0";
        features[18] = "primarysale/IPrimarySale.sol:IRestrictedPrimarySaleV1";
        features[19] = "issuance/ISFTLimitSupply.sol:IRestrictedSFTLimitSupplyV0";
    }

    /// This needs to be public to be callable from initialize via delegatecall
    function minorVersion() virtual override public pure returns (uint256 minor, uint256 patch);

    function implementationVersion() override public pure returns (uint256 major, uint256 minor, uint256 patch) {
        (minor, patch) = minorVersion();
        major = 5;
    }

    function implementationInterfaceId() virtual override public pure returns (string memory interfaceId) {
        interfaceId = "impl/ICedarERC1155Drop.sol:ICedarERC1155DropV5";
    }

    function supportsInterface(bytes4 interfaceID) virtual override public view returns (bool) {
        return (interfaceID == type(IERC165Upgradeable).interfaceId) || ((interfaceID == type(ICedarFeaturesV0).interfaceId) || ((interfaceID == type(ICedarVersionedV2).interfaceId) || ((interfaceID == type(IMulticallableV0).interfaceId) || ((interfaceID == type(IPublicSFTIssuanceV0).interfaceId) || ((interfaceID == type(ISFTSupplyV0).interfaceId) || ((interfaceID == type(IERC1155V1).interfaceId) || ((interfaceID == type(IERC2981V0).interfaceId) || ((interfaceID == type(IPublicRoyaltyV0).interfaceId) || ((interfaceID == type(IPublicUpdateBaseURIV0).interfaceId) || ((interfaceID == type(IPublicMetadataV0).interfaceId) || ((interfaceID == type(ICedarSFTMetadataV1).interfaceId) || ((interfaceID == type(IPublicAgreementV0).interfaceId) || ((interfaceID == type(IPublicPrimarySaleV1).interfaceId) || ((interfaceID == type(IRestrictedAgreementV0).interfaceId) || ((interfaceID == type(IRestrictedSFTIssuanceV0).interfaceId) || ((interfaceID == type(IRestrictedLazyMintV0).interfaceId) || ((interfaceID == type(IRestrictedPausableV0).interfaceId) || ((interfaceID == type(IRestrictedMetadataV0).interfaceId) || ((interfaceID == type(IRestrictedUpdateBaseURIV0).interfaceId) || ((interfaceID == type(IRestrictedRoyaltyV0).interfaceId) || ((interfaceID == type(IRestrictedPrimarySaleV1).interfaceId) || ((interfaceID == type(IRestrictedSFTLimitSupplyV0).interfaceId) || (interfaceID == type(ICedarERC1155DropV5).interfaceId)))))))))))))))))))))));
    }

    function isICedarFeaturesV0() override public pure returns (bool) {
        return true;
    }
}
