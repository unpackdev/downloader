/*

▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▐███████████████████████▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒████▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒███▌▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▄▄▄███▀╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣███▓▄▄▄▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒███▌╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣████▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒███▌╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣████▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
▒▒▒▒▒▒▒▄▄▄▄▄▄▄▄▄▄▒▒▒███▌╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣████▒▒▒▄▄▄▄▄▄▄▄▄▄▒▒▒▒▒▒▒▒▒▒
▒▒▒▒▒▒▐██████████▒▒▒███▌╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣████▒▒▒██████████▒▒▒▒▒▒▒▒▒▒
▒▒▒▒▒▒▐███▓▓▓▓▓▓▓██████▌╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣███████▓▓▓▓▓▓▓███▒▒▒▒▒▒▒▒▒▒
▒▒▒▒▒▒▒███▓▓▓▌▓▓▓██████▌╣╣╣╣╣╣╢╢╢╢╣╣╣╣╣╣╣╣╣╣╣╣▒▓▓▓▓▓▓███████▓▓▓▓▓▓▓███▒▒▒▒▒▒▒▒▒▒
▒▒▒▒▒▒▒▒▒▒███▌▓▓▓▓▓▓███▌╣╣╣╣╣╣▓▓▓▓╣╣╣╣╣╣╣╣╣╣╣╣╫▓▓▓▓▓▓████▓▓▓▓▓▓████▒▒▒▒▒▒▒▒▒▒▒▒▒
▒▒▒▒▒▒▒▒▒▒███▌▓▓▓▓▓▓▓▓▓▒╣╣╣╣╣╣╣╣╣▓▓▓▓╣╣╣▓▓▓▓╣╣╫▓▓▓▒▒▒████▓▓▓▓▓▓████▒▒▒▒▒▒▒▒▒▒▒▒▒
▒▒▒▒▒▒▒▒▒▒████▓▓▓▓▓▓▓▓▓▓╣╣╣╣╣╣╣╣╣▓▓▓▓╣╣╣▓▓▓▓╣╣╫▓▓▓▄▄▄████▓▓▓▓▓▓████▒▒▒▒▒▒▒▒▒▒▒▒▒
▒▒▒▒▒▒▒▒▒▒▒▒▒████▓▓▓▓▓▓▓╣╣╣╣╣╣▓▓▓▓╣╣╣╣╣╣▓▓▓▓╣╣╫▓▓▓▓▓▓████▓▓▓███▌▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
▒▒▒▒▒▒▒▒▒▒▒▒▒████▓▓▓▓▓▓▓╣╣╣╣╣╣╢╢╢▒╣╣╣╣╣╣▓▓▓▓▓▓▓╢╢╢▒▒▒████▓▓▓███▌▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
▒▒▒▒▒▒▒▒▒▒▒▒▒▀███▓▓▓▓▓▓▒╣╣╣╣╣╣╣╣╣╣╣╣▒╢╢╢▓▓▓▓▓▓▓╣╣╣╣╣╣████▓▓▓███▌▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▐██████▌╣╣╣╣╣╣╣╣╣╣╣╣╫▓▓▓▓▓▓▓▓▓▓╣╣╣╣╣╣███████▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▀▀▀███▌╣╣╣╣╣╣╣╣╣╣╣╣▒╢╢╢▓▓▓▓▓▓▓▓▓▓╣╣╣████▀▀▀▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒███▌╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣▓▓▓▓▓▓▓▓▓▓╣╣╣████▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒███▌╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣╣████▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒███▌╣╣╣╣╣╣╣╣╣╣╣╣▒██████████╣╣╣╣╣╣████▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒███▌╣╣╣╣╣╣╣╣╣╣╣╣▓██████████╣╣╣╣╣╣████▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒███▌╣╣╣╣╣╣╣╣╣╣╣╣╢▒▒▒╣╣╣Ñ▒▒▒╣╣╣╣╣╣████▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒███▌╣╣╣╣╣╣╣╣╣╣╣╣╢╣╣╣╣╣╣╣╣╣╣╣╣╣███▌▀▀▀▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒███▌╣╣╣╣╣╣╣╣╣▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒███▌▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒███▌╣╣╣╣╣╣╣╣╣█████████████████▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒███▌╣╣╣╣╣╣╣╣╣████▀▀▀▀▀▀▀▀▀▀▀▀▀▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒███▌╣╣╣╣╣╣╣╣╣████▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒███▌╣╣╣╣╣╣╣╣╣████▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

*/


// SPDX-License-Identifier: MIT

pragma solidity ^0.8.10;

import "./Ownable.sol";
import "./ERC721A.sol";
import "./Strings.sol";

contract GoblinPunktown is ERC721A, Ownable {
    using Strings for uint256;

    constructor() ERC721A("GoblinPunktown", "GPT") Ownable() {
    }

    uint16 constant SUPPLY = 666;
    
    string private baseUri;
    uint256 private goblinPrice = 0.019 ether;

	function tokenURI(uint256 tokenId) public override view returns (string memory) {
        require(_exists(tokenId), "Token does not exist");
        return bytes(_baseURI()).length == 0 
            ? 'ipfs://QmNTnEQEQKpyyYH5SvGsFReLSMAfiW84jdwK5yrdGk9vb7'
            : string(abi.encodePacked(_baseURI(), tokenId.toString()));
	}

    function mint(uint16 count) public payable {
        require(_totalMinted() + count <= SUPPLY, "No more goblins left");
        require(count * goblinPrice <= msg.value, "Ether value sent is not correct");

        _safeMint(_msgSender(), count);
    }

	function mintTo(address toAddress, uint16 count) external onlyOwner {
        require(_totalMinted() + count <= SUPPLY, "No more goblins left");
		_safeMint(toAddress, count);
	}

    function setBaseURI(string calldata uri) external onlyOwner {
        baseUri = uri;
    }

    function _baseURI() internal view virtual override returns (string memory) {
        return baseUri;
    }

	function _startTokenId() internal pure override returns (uint) {
		return 1;
	}

    function setPrice(uint256 _price) external onlyOwner {
        goblinPrice = _price;
    }

    function getPrice() external view returns (uint256) {
        return goblinPrice;
    }

    function withdraw() external onlyOwner {
        payable(msg.sender).transfer(address(this).balance);
    }
}