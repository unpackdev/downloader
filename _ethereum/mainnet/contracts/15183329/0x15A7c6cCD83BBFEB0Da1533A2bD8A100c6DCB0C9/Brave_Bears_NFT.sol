// SPDX-License-Identifier: MIT LICENSE
pragma solidity 0.8.10;

// ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
// ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
// ''''''''''''''''''''''''''''''''''''''''''@@@@'''''@@@@@@@@'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
// ''''''''''''''''''''''''@@@''''''''''''@@@@@@@@@@@@@@@@@@@@@@'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
// '''''''''''''''''''''''@@@@@@'''''''''@@@@@@@@@@@@@@@@@@@@@@@@@'''''''''''''''''''''''''''''''''''''''''''''''''''''''''
// ''''''''''''''''''''''@@@@@@@'''''''''@@@@@@@@@@@@@@@@@@@@@@@@@@@'''''''''''''''''''''''''''''''''''''''''''''''''''''''
// '''''''''''''''''''''@@@@@@@@@@'''''''@@@@@@@@@@@@@@@@@@@@@@@@@@@@@'''''''''''''''''''''''''''''''''''''''''''''''''''''
// ''''''''''''''''''''@@@@@@@@@@@@@@@'''@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@'''''''''''''''@@@@@'''''''''''''''''''''''''''''''
// ''''''''''''''''''''@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@''''''''''@@@@@@@@@@@''''''''''''''''''''''''''''
// ''''''''''''''''''''@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@'''''@@@@@@@@@@@@@@@@''''''''''''''''''''''''''
// ''''''''''''''''''''@@@@@@@@@@@@@''''@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@'''''''''''''''''''''''''
// ''''''''''''''''''''@@@@@@@@@@@@@@'''''@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@'''''''''''''''''''''''''
// ''''''''''''''''''''@@@@@@@@@@@@@@'''''''@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@'''''''''''''''''''''''''
// '''''''''''''''''''''@@@@@@@@@@@@@''''''''@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@'''''''''''''''''''''''''
// '''''''''''''''''''''@@@@@@@@@@@@@''''''''''@@''@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@'''''''''''''''''''''''''
// ''''''''''''''''''''@@@@@@@@@@@@'''''''''''''@@''@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@'''''''''''''''''''''''''
// '''''''''''''''''''@@@'''''''''''''''''''''''''''''@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@''''''''''''''''''''''''''
// ''''''''''''''''''@@@'''''''''''''''''''''''''''''''@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@''''''''''''''''''''''''''
// ''''''''''''''''''@@'''''''''''''''''''''''''''''''''@@@@'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@'''''''''''''''''''''''''''
// '''''''''''''''''@@@''''''''''''''''''''''''''''''''''@@@'''@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@'''''''''''''''''''''''''''
// '''''''''''''''''@@'@@@@@@'''''''''''''''''''''''''''''@@@'''''@@@@@@@@@@@@@@@@@@@@@@@@@@@@@''''''''''''''''''''''''''''
// '''''''''''''''''@@@@@@@@@@@@@''''''''''''''''''''''''''@@'''''''@'''@@@@@@@@@@@@@@@@@@@@@@'''''''''''''''''''''''''''''
// ''''''''''''''''''@@@'''@@@@@@@@'''''''''''''''''''''''''@@'''''''''''''@@@@@@@@@@@@@@@@@@@'''''''''''''''''''''''''''''
// ''''''''''''''''''@@@''@@''''@@@@@@@'''''''''''''''''''''@@'''''''''''''''''@@@@@@@@@@@@@@''''''''''''''''''''''''''''''
// '''''''''''''''''''@@'@@'''''''@@@@@@@@@@@@@@@@@@'''''''''''''''''''''''''''''''@@@@@@@@''''''''''''''''''''''''''''''''
// ''''''''''''''''''''@'@'''''''''@'@@@@@@@@@@@@@@@@'''''''''''''''''''''''''''''''@@@@@@@@@@'''''''''''''''''''''''''''''
// ''''''''''''''''''''@@@''''''''@@'''@@'''@@''''@@@@'''''''''''''''''''''''''''''''''@@@@@@@@@@''''''''''''''''''''''''''
// ''''''''''''''''''''@@'''''''''@@'''@''''@@''''''@@@''''''''''''''''''''''''''''''''''''''@@@@@@''''''''''''''''''''''''
// '''''''''''''''''''''''''''''''@@''@''''@@'''''''@@@''''''''''''''''''''''''''''''''''''''''@@@@@@@'''''''''''''''''''''
// ''''''''''''''''''''''''''''''''@'@@''''@@''''''''@@@''''''''''''''''''''''''''''''''''''''''''@@@@@@@@'''''''''''''''''
// ''''''''''''''''''''''''''''''''@'@''''@@''''''''''@@'''''''''''''''''''''''''''''''''''''''''''''@@@@@'''''''''''''''''
// ''''''''''''''''''''''''''''''''@@@''''@@''''''''''@@@''''''''''''''''''''''''''''''''''''''''''''''@@@'''''''''''''''''
// '''''''''''''''''''''''''''''''''''''''@@'''''''''''@@''''''''''''''''''''''''''''''''''''''@@@@@''@@@''''''''''''''''''
// '''''''''''''''''''''''''''''''''''''''@@'''''''''''@@''''''''''''''''''''''''''''''''''''''@@@@@@@@@'''''''''''''''''''
// '''''''''''''''''''''''''''''''''''''''@'''''''''''''@@''''''''''''''''''''''''''''''''''''''@@@@@@@@'''''''''''''''''''
// ''''''''''''''''''''''''''''''''''''''@@'''''''''''''@@''''''''''''''''''''''''''''''''''''''@@@@@@@@@@'''''''''''''''''
// ''''''''''''''''''''''''''''''''''''''@@'''''''''''''@@'''''''''''''''''''''''''''''''''''''''@@@@@@@@@'''''''''''''''''
// ''''''''''''''''''''''''''''''''''''''@@'''''''''''''@@''''''''''''''''''''''''''''''''''''''''@@@@@@@@@''''''''''''''''
// ''''''''''''''''''''''''''''''''''@@@'@@''''''''''''@@@@''''''''''''''''''''''''''''''''''''''''@@@@@@@@''''''''''''''''
// ''''''''''''''''''''''''''''''''@@@@@@@@''''''''''''@@@@'''''''''''''''''''''''''''''''''''''''''@@@@@@@''''''''''''''''
// ''''''''''''''''''''''''''''''''@'@@''@''''''@@@@''@@@@@''''''''''''''''''''''''''''''''''''''''''@@@@@@''''''''''''''''
// ''''''''''''''''''''''''''''''''@''@@'@'''@@'@@@@@@@@'@'''''''''''''''''''''''''''''''''''''@@'''''@@@@@''''''''''''''''
// ''''''''''''''''''''''''''''''''@@''@@@''@@@@@@''@@@@'''''''''''''''''''''''''''''''''''''''@@@@''''@@@@''''''''''''''''
// ''''''''''''''''''''''''@@'''''@'@''@@''''@@@@@''@@@''''''''''''''''''''''''''''''''''''''''@@@@@@'@@@@@''''''''''''''''
// ''''''''''''''''''''''''@@''''@@@@@@@'''''@@'@@@@@@'''''''''''''''''''''''''''''''''''''''''@@@@@@@@@@@@''''''''''''''''
// '''''''''''''''''''''''@@@@'''@@@@@@''''''@@'''@@@@'''''''''''''''''''''''''''''''''''''''''@@@@@@@@@@@'''''''''''''''''
// '''''''''''''''''''''''@@'@'''@@'@@''''''''@@''@@@'''''''''''''''''''''''''''''''''''''''''@@@@@@@@@@@@'''''''''''''''''
// '''''''''''''''''''''''@@'@@''@@'@@''''''''@@'@@@''''''''''''''''''''''''''''''''''''''''''@@@@@@@@@@@@'''''''''''''''''
// '''''''''''''''''''''''@'''@'@@@''@@''''''''@@@@'''''''''''''''''''''''''''''''''''''''''''@@@@@@@@@@@@'''''''''''''''''
// '''''''''''''''''''''''@'''@@@@@''@@@''''''@@@@''''''''''''''''''''''''''''''''''''''''''''@@@@@@@@@@@@'''''''''''''''''
// '''''''''''''''''''''''@@''@@'@@'''@@@''''@@@@''''''''''''''''''''''''''''''''@@'''''''''''@@@@@@@@@@@''''''''''''''''''
// '''''''''''''''''''''''@@''@@'@@''''@@@''@@@@'''''''''''''''''''''''''''''''''@@@@@''''''''@@@@@@@@@@@''''''''''''''''''
// '''''''''''''''''''''''@@'@@@'@@'''''@@@@@@'''''''''''''''''''''''''''''''''''@@@@@@'''''''@@@@@@@@@@@''''''''''''''''''
// '''''''''''''''''''''''@@@@@''@@@''''@@@@@'''''''''''''''''''@@@@@@@@''''''''@@@@@@@@'''''@@@@@@@@@@@@''''''''''''''''''
// '''''''''''''''''''''''@@@@@'''@@''@@@@@''''''''''''''''''@@@@@@@@@@@@'''''''@@'''@@@@''''@@@@@@@@@@@'''''''''''''''''''
// '''''''''''''''''''''''@@@@@@@@@@@@@@@''''''''''''''''''@@@@@@@@'@@@@@@@''''@@@''''@@@''''@@@@@@@@@@@'''''''''''''''''''
// '''''''''''''''''''''''@@''@@@@@@@@@''''''''''''''''''@@@@@@'''''''''@@@'''@@@''''''@@@''@@@@@@@@@@@@'''''''''''''''''''
// '''''''''''''''''''''''@@@''''''''''''''''''''''''''@@@@@@''''''''''''@@@'@@@@''''''@@@''@@@@@@@@@@@''''''''''''''''''''
// ''''''''''''''''''''''''@@''''''''''''''''''''''''@@@@@@''''''''''''''@@@@@@@'''''''@@@'@@@@@@@@@@@@''''''''''''''''''''
// '''''''''''''''''''''''''@@@''''''''''''''''''''@@@@@@'''''''''''''''''@@@@@''''''''@@@@@@@@@@@@@@@@''''''''''''''''''''
// '''''''''''''''''''''''''@@@@@'''''''''''''''@@@@@@@'''''''''''''''''''@@@@'''''''''@@@@@@@@@@@@@@@'''''''''''''''''''''
// '''''''''''''''''''''''''''@@@@@@''''''''@@@@@@@@@''''''''''''''''''''''''''''''''''@@@@@@@@@@@@@@@'''''''''''''''''''''
// '''''''''''''''''''''''''''''@@@@@@@@@@@@@@@@@@@''''''''''''''''''''''''''''''''''''@@@@@@@@@@@@@@''''''''''''''''''''''
// '''''''''''''''''''''''''''''@@@@@@@@@@@@@@@@''''''''''''''''''''''''''''''''''''''''@@'@@@@@@@@@@''''''''''''''''''''''
// ''''''''''''''''''''''''''''@@@'''''@@''''''''''''''''''''''''''''''''''''''''''''''''''@@@@@@@@@'''''''''''''''''''''''
// ''''''''''''''''''''''''''''@@@''''''''''''''''''''''''''''''''''''''''''''''''''''''''@@@@@@@@@@'''''''''''''''''''''''
// ''''''''''''''''''''''''''''@@@''''''''''''''''''''''''''''''''''''''''''''''''''''''''@@@@@@@@@''''''''''''''''''''''''
// ''''''''''''''''''''''''''''@@@''''@@'''''''''''''''''''''''''''''''''''''''''''''''''@@@@@@@@@@''''''''''''''''''''''''
// ''''''''''''''''''''''''''''@@@'''@@@@''''''''''''''''''''''''''''''''''''''''''''''''@@@@@@@@@'''''''''''''''''''''''''
// '''''''''''''''''''''''''''''@@'''@@@@'''''''''''''''''''''''''''''''''''''''''''''''@@@@@@@@@''''''''''''''''''''''''''
// '''''''''''''''''''''''''''''@@''@@@@@'''''''''''''''''''''''''''''''''''''''''''''''@@@@@@@@'''''''''''''''''''''''''''
// '''''''''''''''''''''''''''''@@@'@@@@@''''''''''''''''''''''''''''''''''''''''''''''@@@@@@@@@'''''''''''''''''''''''''''
// ''''''''''''''''''''''''''''''@@@@'@@@''''''''''''''''''''''''''''''''''''''''''''''@@@@@@@@''''''''''''''''''''''''''''
// ''''''''''''''''''''''''''''''@@@@'@@@''''''''''''''''''''''''''''''''''''@@'''''''@@@@@@@@'''''''''''''''''''''''''''''
// '''''''''''''''''''''''''''''''@@@'@@@'''''''''''''''''''''''''''''''''''@@@''''''@@@@@@@@''''''''''''''''''''''''''''''
// ''''''''''''''''''''''''''''''''@@'@@@''''''''''''''''''''''''''''''''''@@@@'''''@@@@@@@@'''''''''''''''''''''''''''''''
// ''''''''''''''''''''''''''''''''@@''@@'''''''''''''''''''''''''''''''''@@@@@'''''@@@@@@@''''''''''''''''''''''''''''''''
// ''''''''''''''''''''''''''''''''''''@@@''''''''''''''''''''''''''''''@@@@@@@''''@@@@@@@'''''''''''''''''''''''''''''''''
// ''''''''''''''''''''''''''''''''''''@@@''''''''''''''''''''''''''''@@@@@@@@'''@@@@@@@@''''''''''''''''''''''''''''''''''
// '''''''''''''''''''''''''''''''''''''@@@'''''''''''''''''''''''''@@@@@@'@@@''@@@@@@@''''''''''''''''''''''''''''''''''''
// '''''''''''''''''''''''''''''''''''''@@@'''''''''''''''''''''@@@@@@@@@''@@@'@@@@@@@'''''''''''''''''''''''''''''''''''''
// ''''''''''''''''''''''''''''''''''''''@@@'''''''''''''''@@@@@@@@@@@@''''@@@@@@@@@'''''''''''''''''''''''''''''''''''''''
// '''''''''''''''''''''''''''''''''''''''@@'''''''''''@@@@@@@@@@@@@''''''@@@@@@@@'''''''''''''''''''''''''''''''''''''''''
// '''''''''''''''''''''''''''''''''''''''@@@''''''''@@@@@@@@@@''''''''''@@@@@@@'''''''''''''''''''''''''''''''''''''''''''
// ''''''''''''''''''''''''''''''''''''''''@@''''''@@@@@@@'''''''''''''''@@@@''''''''''''''''''''''''''''''''''''''''''''''
// ''''''''''''''''''''''''''''''''''''''''@@@'''@@@@@''''''''''''''''''@@'''''''''''''''''''''''''''''''''''''''''''''''''
// '''''''''''''''''''''''''''''''''''''''''@@''@@@@'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
// '''''''''''''''''''''''''''''''''''''''''@@@@@@'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
// '''''''''''''''''''''''''''''''''''''''''@@@@@''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
// '''''''''''''''''''''''''''''''''''''''''@@@@'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
// '''''''''''''''''''''''''''''''''''''''''@@@''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
// '''''''''''''''''''''''''''''''''''''''''@@'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
// ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

import "./ERC721AQueryable.sol";
import "./Pausable.sol";
import "./Ownable.sol";
import "./IERC721Receiver.sol";
import "./MerkleProof.sol";

contract Brave_Bears_NFT is
    ERC721AQueryable,
    Pausable,
    Ownable,
    IERC721Receiver
{
    constructor() ERC721A("Brave Bears NFT", "BBNFT") {}

    bool public isPaused;

    uint256 public maxSupply;
    uint256 public maxMintAmount;
    uint256 public maxMintPerWallet;
    uint256 public mintPrice;

    function generalPause(bool _bool) public onlyOwner {
        isPaused = _bool;
    }

    function setMaxMintAmount(uint256 _maxMintAmount) public onlyOwner {
        maxMintAmount = _maxMintAmount;
    }

    function setMaxMintPerWallet(uint256 _maxMintPerWallet) public onlyOwner {
        maxMintPerWallet = _maxMintPerWallet;
    }

    function setMintPrice(uint256 _mintPrice) public onlyOwner {
        mintPrice = _mintPrice;
    }

    function setMaxSupply(uint256 _setMaxSupply) public onlyOwner {
        maxSupply = _setMaxSupply;
    }

    function setMerkleRoot(bytes32 _WLroot) public onlyOwner {
        WLmerkleRoot = _WLroot;
    }

    // ========== Upgradable Token Uri =========== //

    string tokenUri;
    string baseUrl;

    function _startTokenId() internal view virtual override returns (uint256) {
        return 1;
    }

    function tokenURI(uint256 _tokenId)
        public
        view
        virtual
        override
        returns (string memory)
    {
        if (!_exists(_tokenId)) revert URIQueryForNonexistentToken();
        string memory prefix = ".json";
        string memory baseURI = _baseURI();
        return
            bytes(baseURI).length != 0
                ? string(abi.encodePacked(baseURI, _toString(_tokenId)))
                : string(
                    abi.encodePacked(baseUrl, _toString(_tokenId), prefix)
                );
    }

    function setBaseUrl(string memory _uri) public onlyOwner {
        baseUrl = _uri;
    }

    // ============= Public Mint ================ //

    mapping(address => uint256) public minted;

    uint256 public startPublicPeriod;
    uint256 public endPublicPeriod;

    function setStartPublicPeriod(uint256 _startPublicTime) public onlyOwner {
        startPublicPeriod = _startPublicTime;
    }

    function setEndPublicPeriod(uint256 _endPublicTime) public onlyOwner {
        endPublicPeriod = _endPublicTime;
    }

    function mint(uint256 _mintAmount) external payable {
        require(!isPaused);
        require(
            block.timestamp >= startPublicPeriod &&
                block.timestamp <= endPublicPeriod
        );
        require(_mintAmount <= maxMintAmount);
        require(totalSupply() <= maxSupply);
        require(totalSupply() + _mintAmount <= maxSupply);
        require(_numberMinted(msg.sender) + _mintAmount <= maxMintPerWallet);
        require(minted[msg.sender] <= maxMintPerWallet);
        require(msg.value >= mintPrice * _mintAmount);
        {
            _mint(msg.sender, _mintAmount);

            minted[msg.sender] += _mintAmount;
        }
    }

    // ================== WL MInt ===================== //

    uint256 public startWLPeriod;
    uint256 public endWLPeriod;

    bytes32 public WLmerkleRoot;

    mapping(address => bool) public usedWL;

    function setStartWLPeriod(uint256 _startWLTime) public onlyOwner {
        startWLPeriod = _startWLTime;
    }

    function setEndWLPeriod(uint256 _endWLTime) public onlyOwner {
        endWLPeriod = _endWLTime;
    }

    function whitelistMint(bytes32[] calldata _proof) public {
        require(
            block.timestamp >= startWLPeriod && block.timestamp <= endWLPeriod
        );
        require(!isPaused);
        require(totalSupply() <= maxSupply);
        require(totalSupply() + 2 <= maxSupply);
        require(minted[msg.sender] <= maxMintPerWallet);
        require(_numberMinted(msg.sender) + 2 <= maxMintPerWallet);
        require(_numberMinted(msg.sender) <= maxMintPerWallet);
        require(!usedWL[msg.sender], "Your Bear Aleady Minted!");
        require(
            MerkleProof.verify(
                _proof,
                WLmerkleRoot,
                keccak256(abi.encodePacked(msg.sender))
            ),
            "You are not Bearlist!"
        );
        {
            _mint(msg.sender, 2);

            usedWL[msg.sender] = true;
            minted[msg.sender] += 2;
        }
    }

    // ================ Barrack ================= //

    uint256 public totalSoldiers;

    bool public isBarrackOpen;

    struct TokenInfo {
        address owner;
    }

    mapping(uint256 => TokenInfo) public ownerOfSoldier;

    struct AccountInfo {
        uint256 numStaked;
    }

    mapping(address => AccountInfo) public totalSoldiersByOwner;

    mapping(address => bool) public addressStaked;

    function barrackPause(bool _bool) public onlyOwner {
        isBarrackOpen = _bool;
    }

    function BecomeSoldier(uint256[] calldata tokenIds) external {
        uint256 tokenId;
        totalSoldiers += tokenIds.length;
        for (uint256 i = 0; i < tokenIds.length; i++) {
            tokenId = tokenIds[i];
            require(ownerOf(tokenId) == msg.sender, "not your Bear");
            require(isBarrackOpen = true, "Barrack is closed");

            safeTransferFrom(msg.sender, address(this), tokenIds[i], "");
            emit JoinedSoldier(msg.sender, tokenId, block.timestamp);

            addressStaked[msg.sender] = true;

            ownerOfSoldier[tokenIds[i]].owner = msg.sender;
        }
        totalSoldiersByOwner[msg.sender].numStaked += tokenIds.length;
    }

    function Surrender(uint256[] calldata tokenIds) external {
        uint256 tokenId;
        totalSoldiers -= tokenIds.length;
        for (uint256 i = 0; i < tokenIds.length; i++) {
            tokenId = tokenIds[i];
            TokenInfo memory staked = ownerOfSoldier[tokenId];
            require(staked.owner == msg.sender, "not an owner");
            require(isBarrackOpen = true, "Barrack is closed");

            this.safeTransferFrom(address(this), msg.sender, tokenIds[i], "");
            emit DisjoinSoldier(msg.sender, tokenId, block.timestamp);

            ownerOfSoldier[tokenIds[i]].owner = address(0);
        }
        totalSoldiersByOwner[msg.sender].numStaked -= tokenIds.length;
    }

    event JoinedSoldier(address owner, uint256 tokenId, uint256 value);
    event DisjoinSoldier(address owner, uint256 tokenId, uint256 value);

    function onERC721Received(
        address,
        address,
        uint256,
        bytes calldata
    ) external pure override returns (bytes4) {
        return IERC721Receiver.onERC721Received.selector;
    }

    function getSoldiersByOwner(
        address addr,
        uint256 start,
        uint256 stop
    ) public view returns (uint256[] memory) {
        if (totalSoldiersByOwner[addr].numStaked == 0) {
            return new uint256[](0);
        }

        uint256 index = 0;
        uint256[] memory ownedTokens = new uint256[](
            totalSoldiersByOwner[addr].numStaked
        );

        for (uint256 tokenId = start; tokenId <= stop; tokenId++) {
            if (ownerOfSoldier[tokenId].owner == addr) {
                ownedTokens[index] = tokenId;
                index++;
                if (index == totalSoldiersByOwner[addr].numStaked) {
                    break;
                }
            }
        }
        return ownedTokens;
    }

    // ================== WAR =================== //

    function WAR(uint256[] memory tokenIds) external onlyOwner {
        totalSoldiers -= tokenIds.length;
        for (uint256 i = 0; i < tokenIds.length; i++) {
            _burn(tokenIds[i]);
        }
    }

    // ================ Reinforcement ================== //

    function Reinforcement(address[] memory _address, uint256[] memory _totalBears)
        external
        onlyOwner
    {
        for (uint256 i = 0; i < _address.length; i++) {
            _mint(_address[i], _totalBears[i]);
        }
    }
    
    // ================= Withdraw ================== //

    function withdraw() public onlyOwner {
        payable(owner()).transfer(address(this).balance);
    }
}