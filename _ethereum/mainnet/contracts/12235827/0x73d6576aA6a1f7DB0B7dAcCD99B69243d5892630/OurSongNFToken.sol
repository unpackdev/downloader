// SPDX-License-Identifier: MIT
pragma solidity >=0.4.22 <0.9.0;

import "./Ownable.sol";
import "./Context.sol";
import "./ERC721.sol";
import "./ERC721Burnable.sol";
import "./SafeMath.sol";

contract OurSongNFToken is Context, Ownable, ERC721Burnable {
  using SafeMath for uint256;

  string private _contractURI;

  constructor(string memory name_, string memory symbol_, string memory baseURI_) public ERC721(name_, symbol_) {
    _setBaseURI(baseURI_);
    setContractURI(baseURI_);
  }

  function setBaseURI(string memory baseURI_) public virtual onlyOwner {
    _setBaseURI(baseURI_);
  }

  function contractURI() public view virtual returns (string memory) {
    return _contractURI;
  }

  function setContractURI(string memory contractURI_) public virtual onlyOwner {
    _contractURI = contractURI_;
  }

  /**
    * @dev Creates a new token for `to`. Its token ID will be automatically
    * assigned (and available on the emitted {IERC721-Transfer} event), and the token
    * URI autogenerated based on the base URI passed at construction.
    *
    * See {ERC721-_mint}.
    *
    * Requirements:
    *
    * - the caller must have the `MINTER_ROLE`.
    */
  function mint(address to_, uint256 tokenId_) public virtual onlyOwner {
    _mint(to_, tokenId_);
  }
}
