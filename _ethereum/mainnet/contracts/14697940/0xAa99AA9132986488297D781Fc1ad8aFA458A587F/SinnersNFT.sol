// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

//@author: Linorth (Dev@Linorth.com)
//
//????????????????????????J???????????????????????????????????????????????????????????????????????????
//???????????????????????5#BJ?????????????????????????????????????????????????????????????????????????
//???????????????????????G#GB???????????????????????????????????????????????YB5???????????????????????
//???????????????????????5@?#G?????????????????????????????????????????????J&B&J??????????????????????
//???????????????????????J&P!BBJ???????????????????????????????????????????P#J&J??????????????????????
//????????????????????????G&7!G&Y?????????????????????????????????????????Y@?J&J??????????????????????
//????????????????????????J&5!!Y&BJ?????????????JJJJJJJJJ????????????????Y&Y~5&J??????????????????????
//?????????????????????????P&?7!!P&GY????JY5PBB##&&&&&&&&#BGPYJ?????????Y&Y~7G#???????????????????????
//??????????????????????????#G777~7P&B55B#&&&&&&#########&&&&&#G5J?????P#?~77&P???????????????????????
//??????????????????????????J&57777~!YB&&&#####################&@&P??5B5~~77J@Y???????????????????????
//???????????????????????????5&Y77777!!!J5B######################&@#G57~7777B#????????????????????????
//????????????????????????????5&Y7777777!!?#######################GJ!!77777Y&Y????????????????????????
//?????????????????????????????5&57??777777B#####################&5!777777J&5?????????????????????????
//??????????????????????????????Y&BJJ?7777?################&&&####G77?J?75&5??????????????????????????
//???????????????????????????????&@#PJ777?B################&#######P??7JG#Y???????????????????????????
//??????????????????????Y55J????J&&#&#G55B#########################&BPG#P????J????????????????????????
//??????????????????????B@@&BY??J&&####&&############################@#???YG#&#Y??????????????????????
//???????????????????????P@&&&P??#@#######&&#&&&#####################@G?YB@&@@GJ??????????????????????
//????????????????????????#@#&@G?B@######&G!~7YG#&################&&#@GG@&B#@5????????????????????????
//????????????????????????5@B#&@#P@&######~:::::!YB&############&GYP#@@@&GB@5?????????????????????????
//????????????????????????J&BP#&&&@&#####&~::::!YJ75##########&BJ^::P@&&BP@G??????????????????????????
//?????????????????????????P@5YG#&&&&&###&G^:::7PGY:~P&######BJ75J::P&&@P&&J??????????????????????????
//??????????????????????????##Y5&@@&##&&##&B7::!PGJ::P&#####&7.7GY^Y#@&GB@5???????????????????????????
//??????????????????????????J#B5#@@@@&#####&&GJ?J?~7P&####&&&B7!YPB##P5B@P????????????????????????????
//???????????????????????????J##5Y55PG#######&&&#B#&&########&&######G##Y?????????????????????????????
//????????????????????????????JP#BP55P&#######GPB#&&&&&&&#&&&&&&###B&&Y???????????????????????????????
//??????????????????????????????JYPGGB@&####&5..^J?JYGPGBBBBBBPGB###@P????????????????????????????????
//????????????????????????????????????YB@&###B^.!^..:!..^!.:~!.:!P#&&J????????????????????????????????
//????????????????????????????????????YG&&&&#&BY!.. !:..~~...7..JB&&Y?????????????????????????????????
//??????????????????????????????????JG&&####&&&&#GYJY!~^7!^~~YYG&@#J??????????????????????????????????
//?????????????????????????????????P&&##########&&&&&&&#####&&&&&@#Y??????????????????????????????????
//????????????????????????????????G@&#############################&&5?????????????????????????????????
//???????????????????????????????G@#######&##&&#################&##@&Y????????????????????????????????
//??????????????????????????????P@&######&&##&###################&##@#J???????????????????????????????
//?????????????????????????????J&&#######&&######################&&#&@P???????????????????????????????
//?????????????????????????????B@########&&######################&###@&J??????????????????????????????
//????????????????????????????Y@&#########&######################&###&@G??????????????????????????????
//????????????????????????????P@&########&&#######################&###@&J?????????????????????????????
//????????????????????????????B@#########&#########################&##&@P?????????????????????????????
//???????????????????????????J&@########&&##########################&#&@G?????????????????????????????
//???????????????????????????Y@&########&&##########################&##@#?????????????????????????????
//

import "./ERC721Enumerable.sol";
import "./Ownable.sol";
import "./SafeMath.sol";
import "./ECDSA.sol";
import "./IERC2981.sol";


contract Sinners is ERC721Enumerable, IERC2981, Ownable {

    using SafeMath for uint256;

    uint256 public  maxsinners            = 6666;
    uint256 public  teamReserveCount      = 0;
    uint256 public  teamReserveMinted     = 0;
    bool    public  maxsinnersFrozenForever = false;
    bool    public  publicSale            = false;
    bool    public  revealed              = false;
    uint256 public  price                 = 0.06 ether;
    uint256 public  publicSaleOffset      = teamReserveCount; 
    uint256 public  maxMintAmount         = 3;
    address private ticketSignerAddress   = 0x78e0eA5fc64eb1f05FB04EE2FBbd9c49d3629c49;
    string  private baseURI;

    mapping(address => uint256) public addressMintedBalance;

    struct SinnersTicket {
        uint256 tokenId;
        uint256 expire;
        bytes signature;
    }

    event Reveal();


    constructor() ERC721("Sinners","SINN") { // add your own name here
        baseURI = "https://sinnersnft.com/api/sinner/";
        transferOwnership(0x0A8Fe622A1b750dbC9E8e464BF0c009cf47e7F5E); // add your owner address in paranteses
        revealed = true;
        emit Reveal();
    }


    //public interface
    function mintSinnersPublic(uint count) external payable {
        require(publicSale, 'Public Sale is Not Active');
        require(totalSupply().sub(teamReserveMinted).add(count) <= maxsinners.sub(teamReserveCount), "Not Enough sinners");
        if (msg.sender != owner()) {
            require(msg.value >= price.mul(count), "Not Enough Ether");}

        uint256[] memory sinners = getUnmintedsinners(count);
        for (uint256 i = 0; i < count; i++) {
            _safeMint(msg.sender, sinners[i]);
        }
    }


    function mintSinnersByTicket(SinnersTicket[] calldata tickets) external payable{
        require(msg.value >= 0.03 ether);
        require(totalSupply().add(tickets.length) <= maxsinners, "Not Enough sinners");
        require(tickets.length >= 1 && tickets.length <= maxMintAmount, "count must be larger than 0 and smaller than maximum mint amount");
        for (uint i = 0; i < tickets.length; ++i) {
            verifyTicketAndMint(tickets[i]);
        }
    }


    //owner interface
    function setBaseURI(string memory uri) external onlyOwner {
        baseURI = uri;
    }

    function setTicketSignerAddress(address TicketSigner) external onlyOwner {
        ticketSignerAddress = TicketSigner;
    }
    function setMaxsinners(uint256 max) external onlyOwner {
        require(!maxsinnersFrozenForever, "maxsinners is Frozen Forever");
        require(max > maxsinners, "max is must be larger than current value");
        maxsinners = max;
    }

    function freezeMaxsinnersForever() external onlyOwner {
        require(!maxsinnersFrozenForever, "Already Frozen");
        maxsinnersFrozenForever = true;
    }

    function withdraw() external onlyOwner {
        uint256 balance = address(this).balance;
        payable(owner()).transfer(balance);
    }

    function setPublicSale(bool isOpen) external onlyOwner {
        publicSale = isOpen;
    }

    function setPrice(uint256 newPrice) external onlyOwner() {
        price = newPrice;
    }

    function reveal() external onlyOwner {
        require(!revealed, "already revealed");
        revealed = true;
        emit Reveal();
    }


    //internal
    function verifyTicketAndMint(SinnersTicket calldata ticket) private {
        bytes32 ticketHash = keccak256(abi.encode(msg.sender, ticket.tokenId, ticket.expire));
        bytes32 ethMsgHash = ECDSA.toEthSignedMessageHash(ticketHash);
        require(ticketSignerAddress == ECDSA.recover(ethMsgHash, ticket.signature), 'Invalid SinnersTicket signature');
        require(block.timestamp <= ticket.expire, "Expired SinnersTicket");
        require(ticket.tokenId >= 0 && ticket.tokenId < maxsinners, "Invalid SinnersTicket tokenId");
        uint256 ownerMintedCount = addressMintedBalance[msg.sender];
        require(ownerMintedCount + 1 <= maxMintAmount, "max NFT per address exceeded");
        addressMintedBalance[msg.sender] = addressMintedBalance[msg.sender]++;
        _safeMint(msg.sender, ticket.tokenId);
        if (ticket.tokenId < teamReserveCount) {
            ++teamReserveMinted;
        }
    }

    function getUnmintedsinners(uint256 count) private returns (uint256[] memory) {
        uint256[] memory sinners = new uint256[](count);
        uint256 checked;
        uint256 found;
        for (uint256 id = 1; id < maxsinners; ++id) {
            ++checked;
            if (!_exists(id)) {
                sinners[found] = id;
                ++found;
                if (found == count) {
                    break;
                }
            }
        }
        publicSaleOffset += checked;
        return sinners;
    }

    function _baseURI() internal view override returns (string memory) {
        return baseURI;
    }

    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) external view override(IERC2981) returns (
        address receiver,
        uint256 royaltyAmount) {
        receiver = owner();
        royaltyAmount = _salePrice.mul(75).div(1000);
    }


    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721Enumerable, IERC165) returns (bool) {
        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);
    }
}