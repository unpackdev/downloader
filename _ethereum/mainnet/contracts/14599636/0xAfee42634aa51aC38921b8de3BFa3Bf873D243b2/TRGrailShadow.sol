// SPDX-License-Identifier: Unlicense

pragma solidity ^0.8.4;

import "./TRKeys.sol";

/// @notice The Reliquary Grail of Shadow
library TRGrailShadow {

  function getElement() public pure returns (string memory) {
    return 'Shadow';
  }

  function getPalette() public pure returns (string memory) {
    return 'Void';
  }

  function getEssence() public pure returns (string memory) {
    return 'Lost';
  }

  function getStyle() public pure returns (string memory) {
    return 'Pajamas';
  }

  function getSpeed() public pure returns (string memory) {
    return 'Hyper';
  }

  function getGravity() public pure returns (string memory) {
    return 'Atmospheric';
  }

  function getDisplay() public pure returns (string memory) {
    return 'MirroredUpsideDown';
  }

  function getColorCount() public pure returns (uint256) {
    return 5;
  }

  function getRelicType() public pure returns (string memory) {
    return TRKeys.RELIC_TYPE_GRAIL;
  }

  function getRuneflux() public pure returns (uint256) {
    return 999;
  }

  function getCorruption() public pure returns (uint256) {
    return 666;
  }

  function getGlyph() public pure returns (uint256[] memory) {
    uint256[] memory glyph = new uint256[](64);
    glyph[0]  = uint256(0);
    glyph[1]  = uint256(0);
    glyph[2]  = uint256(0);
    glyph[3]  = uint256(0);
    glyph[4]  = uint256(0);
    glyph[5]  = uint256(0);
    glyph[6]  = uint256(0);
    glyph[7]  = uint256(0);
    glyph[8]  = uint256(99990000000000000000000000000000000000000000009999000000);
    glyph[9]  = uint256(99990000000000000000000000000000000000000000009999000000);
    glyph[10] = uint256(999900000000000000000000000000000000000000999900000000);
    glyph[11] = uint256(999900000000000000000000000000000000000000999900000000);
    glyph[12] = uint256(99999999000000000000000000000000000000000099999999000000);
    glyph[13] = uint256(99999999000000000000000000000000000000000099999999000000);
    glyph[14] = uint256(119999990000000000000000000000000000009999991100000000);
    glyph[15] = uint256(119999990000000000000000000000000000009999991100000000);
    glyph[16] = uint256(99111199990099009900990099009900990099009999111199000000);
    glyph[17] = uint256(99111199990099009900990099009900990099009999111199000000);
    glyph[18] = uint256(111111999900990099009900990099009900999911111100000000);
    glyph[19] = uint256(111111999900990099009900990099009900999911111100000000);
    glyph[20] = uint256(99999999977999999999999999999999999997779999999999000000);
    glyph[21] = uint256(99999999997799999999999999999999999977799999999999000000);
    glyph[22] = uint256(999999977711111111999999999911111111779999999900000000);
    glyph[23] = uint256(999999997711111111999999999911111111799999999900000000);
    glyph[24] = uint256(9999971111779711117979771111797711119999990000000000);
    glyph[25] = uint256(9999991111777911119797791111977711119999990000000000);
    glyph[26] = uint256(999999971111777711117777771111777711119999999900000000);
    glyph[27] = uint256(999999991111779911117777771111977711119999999900000000);
    glyph[28] = uint256(9999991111111177119777991111111177119999990000000000);
    glyph[29] = uint256(9999991111111177119777991111111177119999990000000000);
    glyph[30] = uint256(999999991111111111119777991111111111119999999900000000);
    glyph[31] = uint256(999999991111111111119777991111111111119999999900000000);
    glyph[32] = uint256(9999991111779911119777991111997711119999990000000000);
    glyph[33] = uint256(9999991111779911119777991111997711119999990000000000);
    glyph[34] = uint256(999999991111111111117777771111111111119999999900000000);
    glyph[35] = uint256(999999991111111111117777771111111111119999999900000000);
    glyph[36] = uint256(99999911111111777777777711111111999999000000000000);
    glyph[37] = uint256(99999911111111777777777711111111999999000000000000);
    glyph[38] = uint256(9999999999997777777777777777779999999999990000000000);
    glyph[39] = uint256(9999999999777777777777777777777999999999990000000000);
    glyph[40] = uint256(999999111111111111111111111199999900000000000000);
    glyph[41] = uint256(999999111111111111111111111199999900000000000000);
    glyph[42] = uint256(99999999991111111111111111119999999999000000000000);
    glyph[43] = uint256(99999999991111111111111111119999999999000000000000);
    glyph[44] = uint256(9999999911111111111111999999990000000000000000);
    glyph[45] = uint256(9999999911111111111111999999990000000000000000);
    glyph[46] = uint256(999999999999111111111199999999999900000000000000);
    glyph[47] = uint256(999999999999111111111199999999999900000000000000);
    glyph[48] = uint256(99999999991111119999999999990000000000000000);
    glyph[49] = uint256(99999999991111119999999999990000000000000000);
    glyph[50] = uint256(990099001111110099009900000000000000000000);
    glyph[51] = uint256(990099001111110099009900000000000000000000);
    glyph[52] = uint256(1111110000000000000000000000000000);
    glyph[53] = uint256(1111110000000000000000000000000000);
    glyph[54] = uint256(1111110000000000000000000000000000);
    glyph[55] = uint256(1111110000000000000000000000000000);
    glyph[56] = uint256(1111000000000000000000000000000000);
    glyph[57] = uint256(1111000000000000000000000000000000);
    glyph[58] = uint256(1111000000000000000000000000000000);
    glyph[59] = uint256(1111000000000000000000000000000000);
    glyph[60] = uint256(1100000000000000000000000000000000);
    glyph[61] = uint256(1100000000000000000000000000000000);
    glyph[62] = uint256(1100000000000000000000000000000000);
    glyph[63] = uint256(1100000000000000000000000000000000);
    return glyph;
  }

  function getDescription() public pure returns (string memory) {
    return 'The Grail of Shadow honors Dom Hofmann for his remarkable advancements in on-chain art and interoperable primitives. His conviction to building open software and IP have inspired an army of artists and builders. This piece recreates an original artwork of his, the Daemon of Corruption(s*).';
  }

}
