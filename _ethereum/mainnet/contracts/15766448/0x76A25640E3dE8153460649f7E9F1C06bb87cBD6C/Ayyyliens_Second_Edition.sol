// SPDX-License-Identifier: MIT

// Amended by AYYYLIEN BOSS

/*
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%S###@###S*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@S#@@@@@@@@@@@@@@@@##%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@##@@@@@@@@@@@@@@@@@@@@@@@#%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@S@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@?#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@S@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@S@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#.@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@S@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@.@@@@@@@@@@@@@@@@##SSS#@@#S?*+;;;+*?S@@@@@@@@@@@@@@@@#@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@*@@@@@@@@@@@@@S*;:,....,,,,...........:+S@@@@@@@@@@@@@@#@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@+@@@@@@@@@@@S+,...........................;S@@@@@@@@@@@@@#@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@.@@@@@@@@@@S;................................*@@@@@@@@@@@@@#@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@?,..................................+@@@@@@@@@@@@@#@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@#@@@@@@@@@?.....................................+@@@@@@@@@@@@@#@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@#@@@@@@@@@%.......................................*@@@@@@@@@@@@@?@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@%@@@@@@@@@#,...............+:......................,S@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@+...............,#:.......................;@@@@@@@@@@@@@#@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@#@@@@@@@@@#,...............:#,........................S@@@@@@@@@@@@@?@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@.@@@@@@@@@@?................:#,........................*@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@#@@@@@@@@@@+................;#.........................:@@@@@@@@@@@@@@S@@@@@@@@@@@@@
@@@@@@@@@@@@@@@+@@@@@@@@@@@:................;#..........................#@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@#@@@@@@@@@@#,................;#..........................%@@@@@@@@@@@@@@S@@@@@@@@@@@@
@@@@@@@@@@@@@@.@@@@@@@@@@@S.................:#,.........................*@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@#@@@@@@@@@@@%.................,#,.........................+@@@@@@@@@@@@@@@*@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@*..................S+.........................;@@@@@@@@@@@@@@@#@@@@@@@@@@@
@@@@@@@@@@@@@?@@@@@@@@@@@@+..................?%.........................:@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@#@@@@@@@@@@@@+..................;#,........................:@@@@@@@@@@@@@@@@%@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@;..................,#,........................:@@@@@@@@@@@@@@@@#@@@@@@@@@@
@@@@@@@@@@@@.@@@@@@@@@@@@@;..................,#:........................:@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@S@@@@@@@@@@@@@;...................#;........................:@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@#@@@@@@@@@@@@@+...................#;........................:@@@@@@@@@@@@@@@@@?@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@*...................S;........................;@@@@@@@@@@@@@@@@@#@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@%...................S+........................+@@@@@@@@@@@@@@@@@#@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@S...................%*...........;?SSS?;......*@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@,....,::,..........??.........,%#?++*?%,.....?@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@.@@@@@@@@@@@@@@@+....;###S?:.......+#........:#%,............S@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@*@@@@@@@@@@@@@@@%.....,,:+%#?,.....,#;......:#?.............,@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@%@@@@@@@@@@@@@@@@:.........:%#:.....:,.....:#*...,;+**+:....;@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@%@@@@@@@@@@@@@@@@*.,*%%*;,...*@;..........,#?..:?#@@@@@@S;..*@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@*@@@@@@@@@@@@@@@@#:S@@@@@#?:..+@+........,S%.,?@@@@@#;;#@#..S@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@.@@@@@@@@@@@@@@@@@@@@@@@@@@@%;.;@+.......%S.;#@@@@@@#:.?@#.,@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%:;#,.....*#,*@@@@@@@@@#,?@%.+@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@?,?@+,......*:*@@@@@@@@@@@:S@;.S@@@@@@@@@@@@@@@@@@@#@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*.%@*.......;@@@@@@@@@@@@S@?.:@@@@@@@@@@@@@@@@@@@@#@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@+?@@:......S@@@@@@@@@@@@@%,.?@@@@@@@@@@@@@@@@@@@@#@@@@@@@@@
@@@@@@@@@@@@#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@,......;#@@@@@@@@@@@%,.,#@@@@@@@@@@@@@@@@@@@@*@@@@@@@@@
@@@@@@@@@@@@S@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%:........,*S@@@@@@@#+...*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@S+#@@@@@#%+:..........:S;,:+**+:..,.,#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*,;+*+:,.:S:.........,*#%:.....:S+.?@@@@@@@@@@@@@@@@@@@@@#@@@@@@@@@@
@@@@@@@@@@@@@#@@@@@@@@@@@@@@@@@@@S;,...,?#*...:,.......:?#S?**%#?,;@@@@@@@@@@@@@@@@@@@@@@*@@@@@@@@@@
@@@@@@@@@@@@@*@@@@@@@@@@@@@@@@@@@@##S%S#S:...:#:....+:...,+?%%*:.,#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#,:+*+:....:#*:::;.*@;.........,S@@@@@@@@@@@@@@@@@@@@@@#@@@@@@@@@@@
@@@@@@@@@@@@@@#@@@@@@@@@@@@@@@@@@@?........;@*.?*:?..*@:.......,S@#?@@@@@@@@@@@@@@@@@@@@;@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%:.....,#*..,......*#,.....;#@@#;?@@@@@@@@@@@@@@@@@@#@@@@@@@@@@@@
@@@@@@@@@@@@@@@#@@@@@@@@@@@@@@@@@@@@@*....*S...........S?....*@@%%@@;+@@@@@@@@@@@@@@@@@%@@@@@@@@@@@@
@@@@@@@@@@@@@@@.@@@@@@@@@@@@@@@@@@@@@@S:..::...........;#,..*@@*..?@#,:S@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@#@@@@@@@@@@@@@@@@@@@@@@#;...............+,.+@@+...,S@%..;#@@@@@@@@@@@@%@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@?@#%@@+................:@@*.....:#@;..,#@@@@@@@@@@#@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@S@@@@@@@@@@@@@@@@%,@@:?@@;...............S@%.......%@;..,#@@@@@@@@@@+@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@#@@@@@@@@@@@@@@@*.%@S,?@#,...:::++;,...+@#,......:@@:..*@@@@@@@@@@#@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@*@@@@@@@@@@@@@@@%.:#@@%@@%..%###SS#;..:@@;.....,+@@?..:@@#@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@S@@@@@@@@@@@@@@@;.:%@@@@@*.+:,,..,,.,#@%:;;+*%#@@%,.,#@?,;%@@@@@;@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@#@@@@@@@@@@@@@@#;..:*S@@@*........:S@@@@@@@@@@S+..,%@S,...;@@@S@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@#@@@@@@@@@@@@@@@?,...,*@@%;,,,,:*@@@@##S%%*+:...,%@#:...,S@@#@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#@@#+,...+@@@@###@@@%;,,........,*#@#;...,S@@#@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*,:S@@#%;..;#@@@@@@@+..,,::::;;*%@@@%:...:S@@#@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#*,....+S@@@S:.:#@%;@@+.:%#@@@@@@@@@@S+....;#@@#@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@#@@@@*,........S@@@#;.;@@S@S.+@@@@#@@#S%?+:.....+@@@#@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@#@@@*.........%@*#@@:.?@@@::@@S@#;@@:........,%@@@S@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@#@@@S;.......%@+#@@#,,@@%.S@*+@%*@?........+#@@@%@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@?@@@@%:.....S@;#@#@?.*#;:@@,?@*S@;......;S@@@#@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#@@@@?:...#@:#@;@@;.,.*@%.S@+#@,...,;S@@@@S@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@.#@@@@S+:@#,@@,*@S...%@+,@@;@#..:*#@@@@#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*#@@@@@@#+@#..#@;..S@::@S;@#*S@@@@@#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@.#@@@@@@@#?+%@%::#@+*@#S@@@@@@@#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@S#@@@@@@@@@@@@@@@@@@@@@@@#*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*##@@@@@@@@@@@@@@@#S@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@.%SS###SS*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    /|    / /                                   ||   / |  / /                                     
   //|   / /  ___              ___      __      ||  /  | / /  ___     //          ___      ___    
  // |  / / //___) ) ||  / / //___) ) //  ) )   || / /||/ / //   ) ) // ||  / / //___) ) ((   ) ) 
 //  | / / //        || / / //       //         ||/ / |  / //   / / //  || / / //         \ \     
//   |/ / ((____     ||/ / ((____   //          |  /  | / ((___/ / //   ||/ / ((____   //   ) )  =
*/

pragma solidity >=0.7.0 <0.9.0;

import "./ERC721.sol";
import "./Counters.sol";
import "./Ownable.sol";

contract AyyyliensSecondEdition is ERC721, Ownable {
  using Strings for uint256;
  using Counters for Counters.Counter;

  Counters.Counter private supply;

  string public uriPrefix = "";
  string public uriSuffix = ".json";
  string public hiddenUri;
  
  uint256 public cost = 0.05 ether;
  uint256 public maxSupply = 50;
  uint256 public maxPhase2MintAmount = 2;
  uint256 public maxPhase1MintAmount = 1;

  mapping(address => uint256) public phase1MintedBalance;

  bool public paused = true;
  bool public phase1Mint = true;
  bool public revealed = false;

  address[] public phase1Addresses;

  constructor() ERC721("Ayyyliens Second Edition", "A3YSE") {
    setHiddenUri("ipfs://QmcWDVP5Yq27tzhJu5zQjA9gk2iqRuwA6uDyBR7WKL1Wm6/hidden.json");
  }

  // MINT FUNCTIONS =======================================================================

  modifier mintCompliance(uint256 _mintAmount) {  
    require(_mintAmount > 0 && _mintAmount <= maxPhase2MintAmount, "Invalid mint amount!");
    require(supply.current() + _mintAmount <= maxSupply, "Max supply exceeded!");
    _;
  }

  function mint(uint256 _mintAmount) public payable mintCompliance(_mintAmount) {
    require(msg.sender == tx.origin);  
    require(!paused, "The contract is paused!");
    require(msg.value >= cost * _mintAmount, "Insufficient funds!");
    require(IERC721(0xDC0Fc76A7E38B63e713773e9A44eF0D7867f7672).balanceOf(msg.sender) > 0, "Must be Ayyyliens Holder to mint");
    
        if(phase1Mint == true) {
            require(isMintListed(msg.sender), "You are not on Phase 1 mint list");
            uint256 ownerMintedCount = phase1MintedBalance[msg.sender];
            require(ownerMintedCount < maxPhase1MintAmount, "You have already minted your Phase 1 token");
            phase1MintedBalance[msg.sender] = _mintAmount;
        }

    _mintLoop(msg.sender, _mintAmount);
  }

  function bossMint(uint256 _mintAmount) public onlyOwner{
     require(supply.current() + _mintAmount <= maxSupply, "Max supply exceeded!");
    _mintLoop(msg.sender, _mintAmount);
  }
  

  function _mintLoop(address _receiver, uint256 _mintAmount) internal {
    for (uint256 i = 0; i < _mintAmount; i++) {
      supply.increment();
      _mint(_receiver, supply.current());
    }
  }

  function mintForAddress(uint256 _mintAmount, address _receiver) public onlyOwner {
      require(supply.current() + _mintAmount <= maxSupply, "Max supply exceeded!");
    _mintLoop(_receiver, _mintAmount);
  }

// Mint List Functions ======================================================

  function mintListAddresses(address[] calldata _users) public onlyOwner {
    delete phase1Addresses;
    phase1Addresses = _users;
  }

  function isMintListed(address _user) public view returns (bool) {
    for (uint i = 0; i < phase1Addresses.length; i++) {
      if (phase1Addresses[i] == _user) {
          return true;
      }
    }
    return false;
  }

// Snapshot Function =========================================================

    function Snapshot() public view onlyOwner returns (address[] memory){
        address[] memory owners = new address[](totalSupply());
        for(uint i=1; i <= totalSupply(); i++){
            owners[i -1] = ownerOf(i);
        }
        return owners;
    }  

//Contract Functions =========================================================

  function totalSupply() public view returns (uint256) {
    return supply.current();
  }

  function walletOfOwner(address _owner)
    public
    view
    returns (uint256[] memory)
  {
    uint256 ownerTokenCount = balanceOf(_owner);
    uint256[] memory ownedTokenIds = new uint256[](ownerTokenCount);
    uint256 currentTokenId = 1;
    uint256 ownedTokenIndex = 0;

    while (ownedTokenIndex < ownerTokenCount && currentTokenId <= maxSupply) {
      address currentTokenOwner = ownerOf(currentTokenId);

      if (currentTokenOwner == _owner) {
        ownedTokenIds[ownedTokenIndex] = currentTokenId;

        ownedTokenIndex++;
      }

      currentTokenId++;
    }

    return ownedTokenIds;
  }

  function tokenURI(uint256 _tokenId)
    public
    view
    virtual
    override
    returns (string memory)
  {
    require(
      _exists(_tokenId),
      "ERC721Metadata: URI query for nonexistent token"
    );

    if (revealed == false) {
      return hiddenUri;
    }

    string memory currentBaseURI = _baseURI();
    return bytes(currentBaseURI).length > 0
        ? string(abi.encodePacked(currentBaseURI, _tokenId.toString(), uriSuffix))
        : "";
  }

// Owner Functions ================================================

  function setRevealed(bool _state) public onlyOwner {
    revealed = _state;
  }

  function setCost(uint256 _cost) public onlyOwner {
    cost = _cost;
  }

  function setPhase2MintLimit(uint256 _mintLimit) public onlyOwner {
    maxPhase2MintAmount = _mintLimit;
  }

  function setPhase1MintLimit(uint256 _mintLimit) public onlyOwner {
    maxPhase1MintAmount = _mintLimit;
  }

  function setHiddenUri(string memory _hiddenUri) public onlyOwner {
    hiddenUri = _hiddenUri;
  }

  function setUriPrefix(string memory _uriPrefix) public onlyOwner {
    uriPrefix = _uriPrefix;
  }

  function setUriSuffix(string memory _uriSuffix) public onlyOwner {
    uriSuffix = _uriSuffix;
  }

  function setPaused(bool _state) public onlyOwner {
    paused = _state;
  }

  function setPhase1(bool _state) public onlyOwner {
    phase1Mint = _state;
  }

  function _baseURI() internal view virtual override returns (string memory) {
    return uriPrefix;
  }

// Withdraw =====================================================================
  function withdraw() public onlyOwner {
    (bool os, ) = payable(owner()).call{value: address(this).balance}("");
    require(os);
  }  
}