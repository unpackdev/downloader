// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "./Random.sol";
import "./Utils.sol";

contract Palette is Random {

    uint32 constant PALETTE_COUNT = 48;

    uint32[5][PALETTE_COUNT] palettes = [
      [0x101010,0xc5c3c6,0x46494c,0x4c5c68,0x1985a1],
      [0x20bf55,0x0b4f6c,0x292a73,0xfbfbff,0x757575],
      [0x06aed5,0x086788,0x303030,0xcccccc,0xdd1c1a],
      [0x909090,0xf2dc9b,0x6b6b6b,0x260101,0x0d0d0d],
      [0xffa822,0x3a9efd,0x3e4491,0x292a73,0x1a1b4b],
      [0x1b3da6,0x26488c,0x2372d9,0x62abd9,0xf2f557],
      [0x2d3142,0x4f5d75,0xbfc0c0,0xffffff,0x292a73],
      [0xf6511d,0xffb400,0x00a6ed,0x292a73,0x0d2c54],
      [0xdddddd,0x404099,0x929bac,0x013d6f,0x071e44],
      [0x3f0259,0xf2e205,0x606060,0xf2ebdc,0xf6511d],
      [0x302840,0x1f1d59,0x3e518c,0x808080,0xdddddd],
      [0x606060,0xbfc0c0,0x348aa7,0x525174,0x513b56],
      [0xef476f,0xffd166,0x06d6a0,0x118ab2,0x073b4c],
      [0x0b132b,0x1c2541,0x3a506b,0x5bc0be,0x6fffe9],
      [0xbce784,0x5dd39e,0x348aa7,0x525174,0x513b56],
      [0x000000,0x14213d,0xfca311,0xe5e5e5,0xffffff],
      [0x114b5f,0x028090,0xe4fde1,0x456990,0xf45b69],
      [0xdcdcdd,0xc5c3c6,0x46494c,0x4c5c68,0x1985a1],
      [0x22223b,0x4a4e69,0x9a8c98,0xc9ada7,0xf2e9e4],
      [0x3d5a80,0x98c1d9,0xe0fbfc,0xee6c4d,0x293241],
      [0x06aed5,0x086788,0xf0c808,0xfff1d0,0xdd1c1a],
      [0x011627,0xf71735,0x41ead4,0xfdfffc,0xff9f1c],
      [0x13293d,0x006494,0x247ba0,0x1b98e0,0xe8f1f2],
      [0xcfdbd5,0xe8eddf,0xf5cb5c,0x242423,0x333533],
      [0xffbf00,0xe83f6f,0x2274a5,0x32936f,0xffffff],
      [0x540d6e,0xee4266,0xffd23f,0x3bceac,0x0ead69],
      [0xffa69e,0xfaf3dd,0xb8f2e6,0xaed9e0,0x5e6472],
      [0x8a00d4,0xd527b7,0xf782c2,0xf9c46b,0xe3e3e3],
      [0x272643,0xffffff,0xe3f6f5,0xbae8e8,0x2c698d],
      [0x361d32,0x543c52,0xf55951,0xedd2cb,0xf1e8e6],
      [0x122c91,0x2a6fdb,0x48d6d2,0x81e9e6,0xfefcbf],
      [0x27104e,0x64379f,0x9854cb,0xddacf5,0x75e8e7],
      [0xe0f0ea,0x95adbe,0x574f7d,0x503a65,0x3c2a4d],
      [0xffa822,0x134e6f,0xff6150,0x1ac0c6,0xdee0e6],
      [0xd9d9d9,0xa6a6a6,0x8c8c8c,0x595959,0x262626],
      [0xa6032f,0x022873,0x035aa6,0x04b2d9,0x05dbf2],
      [0xa6a6a6,0x737373,0x404040,0x262626,0x0d0d0d],
      [0x0f5cbf,0x072b59,0x0f6dbf,0x042940,0x72dbf2],
      [0x0b132b,0x1c2541,0x3a506b,0x5bc0be,0x6fffe9],
      [0x000000,0x14213d,0xfca311,0xe5e5e5,0xffffff],
      [0x22223b,0x4a4e69,0x9a8c98,0xc9ada7,0xf2e9e4],
      [0x3d5a80,0x98c1d9,0xe0fbfc,0xee6c4d,0x293241],
      [0x011627,0xf71735,0x41ead4,0xfdfffc,0xff9f1c],
      [0xd8dbe2,0xa9bcd0,0x58a4b0,0x373f51,0x1b1b1e],
      [0x13293d,0x006494,0x247ba0,0x1b98e0,0xe8f1f2],
      [0xcfdbd5,0xe8eddf,0xf5cb5c,0x242423,0x333533],
      [0x97151f,0xdfe5e5,0x176c6a,0x013b44,0x212220],
      [0xfef7ee,0xfef000,0xfb0002,0x1c82eb,0x190c28]
    ];

    function hexToRgb(uint32 _c) public pure returns(string memory)  {
      return string(
        abi.encodePacked(
          Utils.uint32ToString(_c >> 16 & 0xff),
          ",",
          Utils.uint32ToString(_c >> 8 & 0xff),
          ",",
          Utils.uint32ToString(_c & 0xff)
        )
      );
    }

    function getRandomPalette(uint256 _seed) 
    view public
    returns (
      string[8] memory paletteRGB,
      uint32 paletteId,
      uint256 seed
    )
    {
      seed = prng(_seed);
      paletteId = randUInt32(seed, 0, PALETTE_COUNT);

      for(uint8 i = 0; i < 5; i++) {
        paletteRGB[i] = hexToRgb(palettes[paletteId][i]);
      }

      paletteRGB[5] = hexToRgb(0x222222); // add blackish
      paletteRGB[6] = hexToRgb(0xffffff); // add white

      seed = prng(seed);
      paletteRGB[7] = hexToRgb([0xff0000, 0xffff00][randUInt32(seed, 0, 2)]); // add red or yellow

      string memory temp;
      // limit to 6 in order to avoid too many white/red/yellow backgrounds
      for (uint8 i = 0; i < 6; i++) {
        seed = prng(seed);
        uint32 n = randUInt32(seed, i, 6);
        temp = paletteRGB[n];
        paletteRGB[n] = paletteRGB[i];
        paletteRGB[i] = temp;
      }
    }
}
