// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "./ERC1155.sol";
import "./Ownable.sol";
import "./ERC1155Pausable.sol";
import "./ERC1155Supply.sol";
import "./Strings.sol";
import "./MerkleProof.sol";

/*
.....................................................................................................................................................
.....................................................................................................................................................
.....................................................................................................................................................
.....................................................................................................................................................
.....................................................................................................................................................
.....................................................................................................................................................
.....................................................................................................................................................
.....................................................................................................................................................
.....................................................................................................................................................
.....................................................................................................................................................
.....................................................................................................................................................
......................*@@#...........%@#..********,...,@@%......(@@,.................................................................................
.................,####%@@#########,,*@@,,*%%%%%@@@#...,@@*..,.,,(@&,.................................................................................
..................,,,,&@%,,,,,,,,,*%@@%%@@,..@@@*..,@@@@@@@@@@@@@@@@@.............................................................../................
...................../@@@@@@@@@&.../@@.(@@@@@@@@@@@&.*@@@@(*@@(.(@@................................................................%@@(..............
..................../@@&@@*,@@%...,@@@@@@,...@@/....#@&@@#@%.%@&(@&..............................................................,&@@@#..............
..................,@@&,.,@@@@/.......&@@@@*..@@/...,&(,@@*......(@@.............................................................,@@%,..,%/...........
.................*&&(@@@@(..*%@@@@#@@@*..*#@@@@/......,@@*...*@@@@&............................................................/#,..*@@@@@%,.........
.................................................................................................................................*#*.................
................ .,****,......,,...,************,.,*************,...........**************...*************...,*************..........................
.................*(((((|*((((((/.../((((((((((((*,((((((((((((((/..........*((((((((((((((*../((((((((((((*..*(((((((((((((..........................
..................,/(((((((((((/.../(((/,.,,((((*.,/((((,..,((((*...........,/((((...,((((*../(((/,,,,,,,,...*((((*,,,,,,,,..*.......................
..............#@&../(((((/(((,...,(((((/....((((,..*(((/....((((*.*(((((((,../(((/...,((((*,(((((((((((((/../(((((((((((((../........................
...................//((*.*|((//..,,/////...,//(/,..*((//....//((*..,,,,,,,.../////...,///|*,,//((|******,,.,,*(((|**,,***,...........................
...................///|*.../////...*|///////////,..*|///....///|*..#%%%%%%#../////...,////,..*|//////////|*..*|////////////..........................
...................**,......,*.....*|///////////,..,*,......*,,...........,..**,......*,.....*|//////////|*..,/////////////..........................
..................,,,,,,,,,,...,,,....,,,..,,,,,,,,,,..,,,,,,,,,..........................,,,,,,,,,...,,....,,,..,,,,,,,,,...........................
.................*|////////|*..*|/,..*||*..////////|*..////////|*.........*||*.///,,///..*|////////,.*||*...///,,/////////,.,........................
.................../|*,..*,,..*||*|*||*|*.*|////////,.*|////////,.,,,,,,..*|/,.///,,///.*|/////|*|*,,//////|*|/...*|///,....,........................
..............*(*..***,..****,*************|********.,**********..******..***,.***,,***,********|**,***********.....,****,...........................
................,..**********..***,..****..**********..*********,../(/,..**************..,***..,***..****...***,,*********,.,........................
................,...........................................................................................................,........................
................/@@@@@@@@@@@@@@@%(*&@@&##@@@@@@@@@@@@@@@@@@@@@@@@@@,./@@@@@@@@@@@@@@@@@&@@&#(#@@@#(@@@&#/(@@@#&@@@@@@@@@@@@@#........................
.....................................................................................................................................................
..............................................................................................&/@/%#/&..%#..&&|*&,.,@,...............................
............................................................................................../&&.%#/@..%#.*@@%/&*@,@,...............................
.....................................................................................................................................................
.....................................................................................................................................................
.....................................................................................................................................................
.....................................................................................................................................................
.....................................................................................................................................................
.....................................................................................................................................................
.....................................................................................................................................................
.....................................................................................................................................................
.....................................................................................................................................................
*/

contract KonNeeCheeWahs is ERC1155, Ownable, ERC1155Pausable, ERC1155Supply {
    string public name;
    string public symbol;
    string[2] public uriPS;
    mapping(address => uint256) public allowID;
    mapping(address => uint256) public walletMinted;
    uint256 public currentSupply;
    uint256 public reserve;
    uint256 public publicMintDate;
    uint256 public cost;
    address public vault;
    bytes32 public root;
    bool public revealed;
    
    constructor() ERC1155("") Ownable(msg.sender) {
        // こんにちは
        name = "KonNeeCheeWahs";
        symbol = "KNCW";
        setPause(true);
        reserve = 444;
        allowID[msg.sender] = 444;
        vault = msg.sender;
        _unpause();
        _mint(msg.sender, 0, 1, "");
        _pause();
    }

    function mintPhase() public view returns(uint256) {
        // 段階
        // 0 = not open, 1 = WL, 2 = public
        if(publicMintDate == 0){
            return 0;
        }

        if(block.timestamp < publicMintDate){
            return 1;
        } else {
            return 2;
        }
    }

    function setCost(uint256 newCost) public onlyOwner {
        // 価格なし | オプションがある
        // option to set a cost only at 3/4 minted
        require(currentSupply >= (totalSupply() - (totalSupply()/4)), "3/4 Minted Required");
        cost = newCost;
    }

    function setPause(bool _pauseState) public onlyOwner {
        // 休止
        if(_pauseState){
            _pause();
        } else {
            _unpause();
        }
    }

    function setRoot(bytes32 newRoot) public onlyOwner {
        root = newRoot;
    }

    function setURI(bool _reveal, string[2] memory newUri) public onlyOwner {
        revealed = _reveal;
        uriPS[0] = newUri[0];
        uriPS[1] = newUri[1];
    }

    function setVault(address newVault) public onlyOwner {
        vault = newVault;
    }

    function beginMint() public onlyOwner {
        // 始める
        _unpause();
        publicMintDate = block.timestamp + 14400; // 4hr WL mint
    }

    function setAllow(address _user, uint256 _allowID) public onlyOwner {
        allowID[_user] = _allowID;
    }

    function reservesMint(address to, uint256 mintCount) public {
        // 予備供給
        require(allowID[msg.sender] > 0, "Not Allowed");
        require(reserve - mintCount >= 0, "Lower Count");
        reserve -= mintCount;
        if(mintCount == 1){
            currentSupply++;
            _mint(to, currentSupply, 1, "");
        }
        else{
            uint256[] memory _newIds = new uint256[](mintCount);
            uint256[] memory _amounts = new uint256[](mintCount);
            for (uint256 i = 0; i < mintCount; i++) {
                currentSupply++;
                _newIds[i] = currentSupply;
                _amounts[i] = 1;
            }
            _mintBatch(to, _newIds, _amounts, "");
        }
    }

    function mint(address to, uint256 mintCount, bytes32[] memory proof) payable public whenNotPaused {
        // 一, に, 三 | 作る
        require(mintCount >= 1 && mintCount <= 3, "1, 2, Or 3 Count");
        require(walletMinted[to] < 3, "3 Max");
        require(currentSupply + mintCount < totalSupply() - reserve, "Public Minted Out");

        if(block.timestamp < publicMintDate){
            require(verifyWL(proof, to), "Not On List");
        }
        else{
            require(mintCount == 1, "One Per Transaction");
            require(msg.value >= cost, "Payment If Required");
        }
        
        walletMinted[to] += mintCount;

        if(mintCount == 1){
            currentSupply++;
            _mint(to, currentSupply, 1, "");
            return;
        }

        uint256[] memory _newIds = new uint256[](mintCount);
        uint256[] memory _amounts = new uint256[](mintCount);
        for (uint256 i = 0; i < mintCount; i++) {
            currentSupply++;
            _newIds[i] = currentSupply;
            _amounts[i] = 1;
        }
        _mintBatch(to, _newIds, _amounts, "");  
    }

    function verifyWL(bytes32[] memory proof, address _user) public view returns (bool) {
        if (proof.length != 0){
            if (MerkleProof.verify(proof, root, keccak256(abi.encodePacked(_user)))) {
                return (true);
            }
        }
        return (false);
    }

    function uri(uint256 _id) override public view returns (string memory) {
        require(exists(_id), "Token Does Not Exist");
        if(revealed){
            return string(abi.encodePacked(uriPS[0], Strings.toString(_id), uriPS[1]));
        } else{
            return string(abi.encodePacked(uriPS[0], "hidden", uriPS[1]));
        }
    }

    function totalSupply() override public pure returns (uint256) {
        return 4444;
    }

    function withdraw() public {
        require(allowID[msg.sender] > 0, "Not Allowed");
        require(vault != address(0), "Vault Not Added");

        uint256 balance = address(this).balance;
        require(balance > 0, "No Funds");

        (bool success, ) = payable(vault).call{ value: balance }("");
        require(success, "Withdrawal Failed");
    }

    receive() external payable {
        require(vault != address(0), "Vault Not Added");
        uint256 _eth = msg.value;
        payable(vault).transfer(_eth);
    }

    // The following functions are overrides required by Solidity.
    function _update(address from, address to, uint256[] memory ids, uint256[] memory values)
        internal
        override(ERC1155, ERC1155Pausable, ERC1155Supply)
    {
        super._update(from, to, ids, values);
    }
}