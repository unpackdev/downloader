// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

// &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
// &##################################################################################################&
// &##################################################################################################&
// &#########################GPP555555555555555555555PPG##############GPPB############################&
// &######################57^:.........................:^75#########B7...:7G##########################&
// &####################G!. ............................. .~G#######B^ ... .7P########################&
// &###################B^ ................................. ^B#######BJ^.... .!P######################&
// &###################5........:!!!!!!!!!!!!!!!!!!!:........Y#########BY^......~5####################&
// &###################Y........P###################P:.......Y####B7?###&G:.......~Y##################&
// &###################Y.......:G###################B:.......Y###P^  ~B##G:.........^P################&
// &###################Y.......:G###################B:.......Y##J.... ~B#G:......... :G###############&
// &###################Y.......:G###################B:.......Y##7  .  ^B#G:.......... J###############&
// &###################Y.......:G###################B:.......Y###Y7!!JG##B^.......... ?###############&
// &###################Y.......:G###################B:.......Y############J.......... ?###############&
// &###################Y.......:G&&&&&&&&&&&&&&&&&&&G:.......Y#############5^. ...... ?###############&
// &###################Y........~?JJJJJJJJJJJJJJJJJJ~........Y###############P?!:.... ?###############&
// &###################Y.....................................Y################&#~.... ?###############&
// &###################Y.....................................Y##################~.... ?###############&
// &###################Y.....................................Y&&&###############~.... ?###############&
// &###################Y.....................................!JJY5GB############~.... ?###############&
// &###################Y......................................   ..^!YB#########~.... ?###############&
// &###################Y......................................   ... .^Y########~.... ?###############&
// &###################Y.....................................!J?!^..... 7#######~.... ?###############&
// &###################Y.....................................Y&&#BY:.... ?######~.... ?###############&
// &###################Y.....................................Y####&J.....^B#####~.... ?###############&
// &###################Y.....................................Y#####5.....^B#####~.... ?###############&
// &###################Y.....................................Y#####5.....^B#####~.... ?###############&
// &###################Y.....................................Y#####5.....^B#####~.... ?###############&
// &###################Y.....................................Y#####5.....^B#####~.... ?###############&
// &###################Y.....................................Y#####5.....^B#####~.... ?###############&
// &##################&5.....................................Y&####5.....^B#####~.... ?###############&
// &################BY7~.....................................~7YB##P......JB###5:.... Y###############&
// &###############P^  .......................................  :P##? .....^~!^..... !B###############&
// &###############J ........................................... J###J:. .... .... :?B################&
// &###############B?:.........................................:?B####BY!^:.....^!JG##################&
// &#################BPP55555555555555555555555555555555555555PB##########GPPPPGB#####################&
// &##################################################################################################&
// &##################################################################################################&
// &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

import "./ERC721.sol";
import "./Ownable.sol";
import "./LibString.sol";


contract Guzzler is ERC721, Ownable {

    mapping(address => uint256) public walletBalance;
    uint256 public price = 0.01 ether;
    uint256 public maxSupply = 512;
    uint256 public maxWallet = 5;
    uint256 public totalSupply;
    bool public minting;
    bool public teamMinted;
    string public baseURI;

    constructor() ERC721() {
        _initializeOwner(msg.sender);
    }

    function enable() public onlyOwner {
        minting = true;
    }

    function withdraw() public onlyOwner {
        payable(msg.sender).transfer(address(this).balance);
    }

    function setPrice(uint256 _price) public onlyOwner {
        price = _price;
    }

    function setBaseURI(string memory _baseURI) public onlyOwner {
        baseURI = _baseURI;
    }

    function setMaxWallet(uint256 _max) public onlyOwner {
        maxWallet = _max;
    }

    function mintTeam() public onlyOwner {
        require(teamMinted == false, "ALREADY_MINTED");
        _mintTokens(6);
        teamMinted = true;
    }

    function _mintTokens(uint256 amount) internal {
        require((totalSupply + amount) <= maxSupply, "NO_SUPPLY");
        for(uint256 i = 0; i < amount; i++) {
            uint256 id = totalSupply + 1;
            _safeMint(msg.sender, id, "");
            totalSupply++;
        }
    }

    function mint(uint256 amount) public payable {
        require(minting == true, "NOT_READY");
        require(msg.value == amount * price, "BAD_VALUE");
        require(amount + walletBalance[msg.sender] <= maxWallet, "LIMIT_EXCEEDED");
        walletBalance[msg.sender] = walletBalance[msg.sender] + amount;
        _mintTokens(amount);
    }

    function tokenURI(uint256 tokenId) public view override returns (string memory) {
        return string(
            abi.encodePacked(
                baseURI,
                "/",
                LibString.toString(tokenId)
            )
        );
    }

    function name() public pure override returns (string memory) {
        return "Gas Guzzlers";
    }

    function symbol() public pure override returns (string memory) {
        return "GUZZLE";
    }
}
