// SPDX-License-Identifier: MIT
pragma solidity ^0.8.15;

import "./ERC721.sol";
import "./Ownable.sol";
import "./Counters.sol";
import "./Strings.sol";
import "./SafeMath.sol";

import "./ContentMixin.sol";
import "./NativeMetaTransaction.sol";
                                                                 
contract OwnableDelegateProxy {}

contract ProxyRegistry {
    mapping(address => OwnableDelegateProxy) public proxies;
}

contract ERC721Tradeable is ERC721, ContextMixin, NativeMetaTransaction, Ownable {
  using SafeMath for uint256;
  using Counters for Counters.Counter;

  //Price is 0.01 ETH
  uint256 internal PRICE = 10000000;
  string public _contractURI;
  string internal _baseTokenURI;
  bool internal _isActive;
  string internal name_;
  string internal symbol_;
  uint256 internal MAX_FREE = 1;
  address proxyRegistryAddress;
  uint256 internal constant MAX_SUPPLY = 222;
  uint256 internal constant MAX_PER_TX = 5;
  uint256 internal constant MAX_PER_WALLET = 10;
  address[] allowlist = [0x005012B3ec1cD28345F1f27610B05b5bF561F498,0x00677E5764F3cAc6ca157698a108De4b0d7a851a,0x03D9a2805039233772303CE5f840D0CE059441F0,0x0403E1A20EfdbDa42a9261E1Badd5B25fDd9c83f,0x0436d39e637fEBF17a3cb01E428e045842D82472,0x05a054f1bA2AC54138b424A86ff1296fC7fC4B9a,0x05F25f9267C26623fCDB041898C39D0052cEBd5B,0x0601f794CfD96C939d2F918f8a45a1Be1883ebDE,0x07E756e8f7E40b479999BB05a54E84Bcf7A39F77,0x0eFe2D7023094a878daCAbfEC74fB4832BA5Ce7B,0x0F42F2F817b307a5fbacb80e4eBeeE9F57c303D2,0x0FbB404218cB510434bF09bba033eD5bd1766280,0x153dBb928FFdEf7Bf959a171e9D85FE757C6922d,0x1B5fc1095852Cd0891266d39b40Def5002206D48,0x1C5026027476edB7DD05fAC702404B3517B85Fc3,0x1e74Bc2a5BC3Acb5AB358587bc71dDb8FF661e4a,0x24CBeACa01B32ebdad024aF1f9809b3d17585970,0x2C32C56471ddAE47225Ee82658c176945733b180,0x2c9A5d291c59A17FF751E0A7dB5837E871612992,0x2f719992B25c9405748f628e7B99CA7934ac7fb1,0x2faDA86e598338C4E9eAf4AFE303402583a98D85,0x35Bad3916d8f11a66516Ccc5a86F6a9BD1f43425,0x3695F88996EC3544E1D78EEf2b92756C797Bb2f8,0x37AA91289750478f9B9Fe2a91e4a0bB71d88FF72,0x37f059134d3cAdf54A143Cd9dcd0504f9B3eF261,0x38651420B05f8f7F69A3d33a673b7ecAF60f78E1,0x38F80163Ad1C8930C921B58317df5bB43CD1Bfc3,0x3FB60d19791516A5F724ADAD25aAc72516619B2D,0x4246689a46a9d008eD4AF8D7caF1e9dC5a66CCB9,0x437AB96817A3fb643b12b379b445Fcbb30125FAd,0x469dcA69F28865E7A9b1AEc12D93C1303f78f6C5,0x4A7d3ACaD9f7117442dbEB58104969C284cDa7Cc,0x4c6B19Ed4C49141580887E80DcBb03D2d40F97Bd,0x4E4AAAB4232CF004B2B1cC5aD765E08738EdA157,0x524493D5e96dd147694E72024eF7eeb23365422A,0x5627204DE96f95DF54756b5b0d4167a4C817348C,0x59B6Ea49573D465792A6395b206cd197cB7b7195,0x5B640e6a55C8a715b5c60D8C7A11E4E07C3f7b91,0x5C563A17Ee800C88746795e39F2a26A72406B7A1,0x5F4bC750432d6EEf261da9C9441c92008fdCcDDF,0x67409414BBBE2366d72AE95B5E1F7418A8aDdc93,0x6922a2b40cafaC5Cb2EFf0F4270e6B1c321C410c,0x692cCdFf85BDBDdCAd71001Cd797DDFd397D83b2,0x6981e9189C0E63e7163A1ebF8E4b185CcE826985,0x6Bb7d4d817b3c66067f9491C9a54915316E383cD,0x6E28b7BC1851162ABD07B9Ef84651b00DbA20074,0x73b5Ce95f7d2860ba127ef527b07005ad08e6A58,0x771Ced6f58c5e86e1Cddbd0Cc739aF566aCE0A34,0x780565708b6Dbd6E254e041F6fE0DF8046368393,0x78815ee9BeDCD7D2D1fA4cf78bBaD61916c1A1Dc,0x796d05F15b910Ca01f2A9E458E5634b7BE2a5bA1,0x81a3f99c56712607926A0125D17fe30Dfe8aFAF2,0x8927Fc1CF07c76f26437a3f13B69E25AA25b986e,0x89462230e817c63AfA9D9BA46395eC5844c30F78,0x8b93cf1737C60Ed86Ce714A4e66fb710638FC921,0x8C20c766F7CB540e2baAE4B5cE1dCd319ae3865b,0x8d83C9D09b2650FE96982D51e65f7ac724145E61,0x91e72476a5CC200261BFDa4adA33F7886F4DF3dE,0x92040656158dFCB73C4D43c560382BCc148d5b10,0x95fCF5d53853fc8F06513aDD85830948a7B83D0d,0x9819094eD6581F611ee060c6096Ed121f2EAFf96,0x9994217F77466b67d012BFB5944D77d5DC3EB937,0x9ad6E0e9084351DA288c40F09D3456961AbBb948,0x9e6Fe4A09989e9d421775c8072A3df75095c2976,0x9f48b1233d4B4BeDD054aD05229F62859d7002e0,0x9fa3C87Eb4668984b87E185b24ae08759b0f50BD,0xA1fA08CA7dFe0C2CbC92DDc3cFEc782aAc2b8e31,0xACA2725ffa0227d125C2BDB4834B3de69F3de8Ce,0xACCF5A951AaB3Ade3158298C375862330a25FbE0,0xb63da0eEBbc1909f280c88c02c89C3312BF76984,0xb902296cBC1aD3d6aB1BC64293706afa4322D4Df,0xb98296C9b2D75C6c358cc9367ACb4Ff433F0a742,0xC6634ccf4Cce665b30f653EC9C9Dff9dB72a1936,0xC70b8665d7Afbcab831F95830B4789759A588Ad0,0xC8941CBEFF9422885c95e2dE0506005Bb10994B5,0xca67d47d92FEd56574B6561B9E1b1E2D899C1f7A,0xcb5d3f45fC255877af0Aa7469c8566c1b5d06726,0xD03C4F10ef74d2C8AacbEAe3d853BBB9B4659C70,0xD552c255B0a94a38633353187239aB770eE314c6,0xD59FAf00dE972a86f8ba678cA94E76a18753f768,0xD78208a0D486E1EE1cBdF4ab3F343555fB422F5B,0xD8055Aaaa6Cd2994EBc00a978770746c89f51303,0xDBF289b65e393c4E1b750759eF6DeE373FCF316A,0xDBfF9D4810595Ce4A558A7A944e92B542618c67a,0xde7BC4A5774Dff647665cD9C5F9BA665Cf662663,0xE24a157fC29799a7e3417D27FEe4DA1f028D132B,0xE3A39Fe963212d6970e046aFC5c6b4e300536208,0xE5DBa0161BCa375d08D3469C762A0F1E88DFb1fe,0xe897248b60e26b6eFD403D309755FCD2Ae82fA93,0xE8eCC0b7bd563c8a95e4D0608B41C0AAB9E4843e,0xEa4aa96f78d7f7080F72f9f4C6438f4BdBBfAc5A,0xEC46f9F5BF1877d96614354061560FcebB2D470f,0xeD18f6cb3bf8277be2254DBA37510a7f6aF1d34c,0xED29eC62b4Ae7CED4E3EAc8AFa74c13FA9d45712,0xEE11D85440a16ca3CDbd9e6b30Ba89822231B225,0xF2e13e62769637d01ee3e320F1AD4958B4019CAd,0xf36353920f8d2Dc13d9cF23e30C4A9e15A2Da51a,0xf640d01D98390291d8D035AC60446b03CA790065,0xfb8eD712beFb1502f1F9f148B99f622d2d20cf5D,0xAF812838675aB659A3139bC22b4cbB75968C34Ee,0x1d1429874CE5e04733E6383b4DFe028bB6e8B846,0x4fF554C93442471D82FE9F3CbA1828493F6Ad645,0x520a66198c25245d917a1Fc455432525aff9Df27,0xCD41302D7c252899422A1bef90Faf1951912EA50,0x6a847e7184b7e22735A04250B6E10cF6653fe38b,0x41075163cbbeB1c718AE819E0861647391D1D8fa,0xcdE43b0865133551697077C45B74318CbF9A9e1D,0xfD944D82DE65374D8a4254B3eA180b63cf2bc8d6,0xf853aa37bdeF692A134ec9B43Df2404ab24411C8,0x15D234CF14B4554079A98A1e928691c65027DEfb,0x4dbC3F9D40903225907db7EF1e9F0B18513164d7,0x0490aCDB6E3ace8615d6667036d2438A2fe6213A,0xAF3CA7f5473398b8769D9765963C14d58717FfC9,0x45E666a0b7b745D1516045963c09923F5ff61F74,0x40054eA5b996F9e2c63cF898737a8002D6cAF9fD,0xD2cEc0327665876D8016e2D4433AEe029652dEbC,0xDeCDC4943680c82d97624995C1411dD8925fd2e5,0x4AA19fF60e054476f0f20EfBadeb0F662E0C107C,0xcb783Aa7cB79964b4893Dc7cb0207ffcb9f4a3BC,0xb5501D0d9acA984c3aD4Df6A50845F90c33684e8,0xE44e5293358B5aeB9331D4aeA4FC1C363d6A7191,0xa9e9f11eB4920284f62fF6f38584e151c863D575,0xeB7c99922C14CF3cfA2738a5C0Fa8084cf67c5B6,0xb5C5b0daf987C1eCeeEbBa5689F6Ba60B50e2460,0xa788668858517a20812d35d588CBcdFDd0934f28,0xA3c438Fc0c12bE0E5ed66f42281139689fe47a42,0xf13dBe8bb30032Ce06f6b8e19400b042587489bA,0xB90c8fD5B063f8950A8705251821eFaafcec8203,0xCdB26D0503F214793F11eE647e7ac581152F41f5];
  mapping (address => bool) internal approvedAddresses;
  Counters.Counter internal _nextTokenId;
     
    constructor(
        string memory _name,
        string memory _symbol,
        address _proxyRegistryAddress
    ) ERC721(_name, _symbol) {
        proxyRegistryAddress = _proxyRegistryAddress;
        _nextTokenId.increment();
        _initializeEIP712(_name);
        name_ = _name;
        symbol_ = _symbol;
        for(uint i; i < allowlist.length; i++) {
          approvedAddresses[allowlist[i]] = true;
        }
    }

    function _safeMint(
        address to,
        uint256 tokenId,
        bytes memory data
    ) internal override {
      _safeMint(to, tokenId, data);
    }

    function name() public view virtual override returns (string memory) {
        return name_;
    }

    function tokenURI(uint256 id) public view virtual override returns (string memory) {
        //metadata
        string memory base = _baseTokenURI;
        return string.concat(
          string.concat(base, Strings.toString(id)),
          ".json");
    }

    function setFreePerWallet(uint256 amount) public onlyOwner {
      MAX_FREE = amount;
    }

    function setMintPriceInGWei(uint256 price) public onlyOwner {
      PRICE = price;
    }

    function symbol() public view virtual override returns (string memory) {
        return symbol_;
    }

    function mintPriceInWei() public view virtual returns (uint256) {
        return SafeMath.mul(PRICE, 1e9);
    }

    function maxFree() public view virtual returns (uint256) {
        return MAX_FREE;
    }
}
