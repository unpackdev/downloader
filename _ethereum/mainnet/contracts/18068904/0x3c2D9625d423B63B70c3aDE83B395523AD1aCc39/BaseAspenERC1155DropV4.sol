// SPDX-License-Identifier: Apache-2.0

// Generated by impl.ts. Will be overwritten.
// Filename: './BaseAspenERC1155DropV4.sol'

pragma solidity ^0.8.4;

import "./IAspenERC1155Drop.sol";
import "./IAspenFeatures.sol";
import "./IAspenVersioned.sol";
import "./IMulticallable.sol";
import "./IERC1155.sol";
import "./IERC2981.sol";
import "./IERC4906.sol";
import "./ISFTSupply.sol";
import "./ISFTLimitSupply.sol";
import "./ICedarSFTIssuance.sol";
import "./IRoyalty.sol";
import "./IUpdateBaseURI.sol";
import "./IContractMetadata.sol";
import "./IOwnable.sol";
import "./IPausable.sol";
import "./IAgreement.sol";
import "./IPrimarySale.sol";
import "./IPlatformFee.sol";
import "./ILazyMint.sol";
import "./ISFTClaimCount.sol";

/// Delegate features
interface IDelegateBaseAspenERC1155DropV4 is IDelegatedSFTSupplyV2, IDelegatedSFTIssuanceV1, IDelegatedRoyaltyV1, IDelegatedUpdateBaseURIV1, IDelegatedMetadataV0, IDelegatedPausableV0, IDelegatedAgreementV1, IDelegatedPrimarySaleV0, IDelegatedPlatformFeeV0 {}

/// Restricted features
interface IRestrictedBaseAspenERC1155DropV4 is IRestrictedERC4906V0, IRestrictedSFTLimitSupplyV1, IRestrictedSFTIssuanceV6, IRestrictedRoyaltyV1, IRestrictedUpdateBaseURIV1, IRestrictedMetadataV2, IRestrictedPausableV1, IRestrictedAgreementV3, IRestrictedPrimarySaleV2, IRestrictedSFTPrimarySaleV0, IRestrictedOperatorFiltererV0, IRestrictedOperatorFilterToggleV0, IRestrictedLazyMintV1, IRestrictedSFTClaimCountV0 {}

/// Inherit from this base to implement introspection
abstract contract BaseAspenERC1155DropV4 is IAspenFeaturesV1, IAspenVersionedV2, IMulticallableV0, IERC1155V5, IERC1155MetadataURIV0, IERC1155BurnableV0, IERC1155NameSymbolV0, IERC2981V0, IPublicSFTIssuanceV5, IPublicOwnableV1, IPublicAgreementV2, IPublicOperatorFilterToggleV1 {
    function supportedFeatureCodes() override public pure returns (uint256[] memory features) {
        features = new uint256[](35);
        /// IAspenFeatures.sol:IAspenFeaturesV1
        features[0] = 0x6efbb19b;
        /// IAspenVersioned.sol:IAspenVersionedV2
        features[1] = 0xe4144b09;
        /// IMulticallable.sol:IMulticallableV0
        features[2] = 0xad792170;
        /// standard/IERC1155.sol:IERC1155V5
        features[3] = 0xe2318aef;
        /// standard/IERC1155.sol:IERC1155MetadataURIV0
        features[4] = 0x9e97890c;
        /// standard/IERC1155.sol:IERC1155BurnableV0
        features[5] = 0x893adf41;
        /// standard/IERC1155.sol:IERC1155NameSymbolV0
        features[6] = 0x70cdd62d;
        /// standard/IERC2981.sol:IERC2981V0
        features[7] = 0x4313e0e3;
        /// standard/IERC4906.sol:IRestrictedERC4906V0
        features[8] = 0xd8519fe1;
        /// issuance/ISFTSupply.sol:IDelegatedSFTSupplyV2
        features[9] = 0xd8a717a5;
        /// issuance/ISFTLimitSupply.sol:IRestrictedSFTLimitSupplyV1
        features[10] = 0x4671a6e2;
        /// issuance/ICedarSFTIssuance.sol:IPublicSFTIssuanceV5
        features[11] = 0xbe97b5f9;
        /// issuance/ICedarSFTIssuance.sol:IDelegatedSFTIssuanceV1
        features[12] = 0xb6cf25d6;
        /// issuance/ICedarSFTIssuance.sol:IRestrictedSFTIssuanceV6
        features[13] = 0xe6c29512;
        /// royalties/IRoyalty.sol:IDelegatedRoyaltyV1
        features[14] = 0x3da80d9a;
        /// royalties/IRoyalty.sol:IRestrictedRoyaltyV1
        features[15] = 0x29e81c60;
        /// baseURI/IUpdateBaseURI.sol:IDelegatedUpdateBaseURIV1
        features[16] = 0x0ed70707;
        /// baseURI/IUpdateBaseURI.sol:IRestrictedUpdateBaseURIV1
        features[17] = 0xe7f77644;
        /// metadata/IContractMetadata.sol:IDelegatedMetadataV0
        features[18] = 0xc5ef2830;
        /// metadata/IContractMetadata.sol:IRestrictedMetadataV2
        features[19] = 0x7c749d62;
        /// ownable/IOwnable.sol:IPublicOwnableV1
        features[20] = 0x48fcaf28;
        /// pausable/IPausable.sol:IDelegatedPausableV0
        features[21] = 0x8b81344f;
        /// pausable/IPausable.sol:IRestrictedPausableV1
        features[22] = 0x9a19ec63;
        /// agreement/IAgreement.sol:IPublicAgreementV2
        features[23] = 0x6051f2a9;
        /// agreement/IAgreement.sol:IDelegatedAgreementV1
        features[24] = 0x3ae96461;
        /// agreement/IAgreement.sol:IRestrictedAgreementV3
        features[25] = 0x2f96dff3;
        /// primarysale/IPrimarySale.sol:IDelegatedPrimarySaleV0
        features[26] = 0xd6e1bfe9;
        /// primarysale/IPrimarySale.sol:IRestrictedPrimarySaleV2
        features[27] = 0x63ff2dbf;
        /// primarysale/IPrimarySale.sol:IRestrictedSFTPrimarySaleV0
        features[28] = 0x47c483fb;
        /// royalties/IRoyalty.sol:IRestrictedOperatorFiltererV0
        features[29] = 0x8622d2ee;
        /// royalties/IRoyalty.sol:IPublicOperatorFilterToggleV1
        features[30] = 0x90fc4399;
        /// royalties/IRoyalty.sol:IRestrictedOperatorFilterToggleV0
        features[31] = 0x22a8937c;
        /// royalties/IPlatformFee.sol:IDelegatedPlatformFeeV0
        features[32] = 0x6195f7de;
        /// lazymint/ILazyMint.sol:IRestrictedLazyMintV1
        features[33] = 0x7f0a633a;
        /// issuance/ISFTClaimCount.sol:IRestrictedSFTClaimCountV0
        features[34] = 0xd603d728;
    }

    /// This needs to be public to be callable from initialize via delegatecall
    function minorVersion() virtual override public pure returns (uint256 minor, uint256 patch);

    function implementationVersion() override public pure returns (uint256 major, uint256 minor, uint256 patch) {
        (minor, patch) = minorVersion();
        major = 4;
    }

    function implementationInterfaceId() virtual override public pure returns (string memory interfaceId) {
        interfaceId = "impl/IAspenERC1155Drop.sol:IAspenERC1155DropV4";
    }

    function supportsInterface(bytes4 interfaceID) virtual override public view returns (bool) {
        /// ERC165 'handshake'
        if ((interfaceID == 0x0) || (interfaceID == 0xffffffff)) return false;
        /// ERC165 itself
        if (interfaceID == 0x01ffc9a7) return true;
        /// impl/IAspenERC1155Drop.sol:IAspenERC1155DropV4
        if (interfaceID == 0x6623f7a8) return true;
        /// IAspenFeatures.sol:IAspenFeaturesV1
        if (interfaceID == 0x43c60851) return true;
        /// IAspenVersioned.sol:IAspenVersionedV2
        if (interfaceID == 0x0b2a676f) return true;
        /// IMulticallable.sol:IMulticallableV0
        if (interfaceID == 0xac9650d8) return true;
        /// standard/IERC1155.sol:IERC1155V5
        if (interfaceID == 0xd9b67a26) return true;
        /// standard/IERC1155.sol:IERC1155MetadataURIV0
        if (interfaceID == 0x0e89341c) return true;
        /// standard/IERC1155.sol:IERC1155BurnableV0
        if (interfaceID == 0x9e094e9e) return true;
        /// standard/IERC1155.sol:IERC1155NameSymbolV0
        if (interfaceID == 0x93254542) return true;
        /// standard/IERC2981.sol:IERC2981V0
        if (interfaceID == 0x2a55205a) return true;
        /// issuance/ISFTSupply.sol:IDelegatedSFTSupplyV2
        if (interfaceID == 0x8a73b13c) return true;
        /// issuance/ISFTLimitSupply.sol:IRestrictedSFTLimitSupplyV1
        if (interfaceID == 0x87198cf2) return true;
        /// issuance/ICedarSFTIssuance.sol:IPublicSFTIssuanceV5
        if (interfaceID == 0xb4c5faa1) return true;
        /// issuance/ICedarSFTIssuance.sol:IDelegatedSFTIssuanceV1
        if (interfaceID == 0x6f21eb6e) return true;
        /// issuance/ICedarSFTIssuance.sol:IRestrictedSFTIssuanceV6
        if (interfaceID == 0x0602f542) return true;
        /// royalties/IRoyalty.sol:IDelegatedRoyaltyV1
        if (interfaceID == 0xfe8e7ae6) return true;
        /// royalties/IRoyalty.sol:IRestrictedRoyaltyV1
        if (interfaceID == 0xfbc2afff) return true;
        /// baseURI/IUpdateBaseURI.sol:IDelegatedUpdateBaseURIV1
        if (interfaceID == 0x7aafcb38) return true;
        /// baseURI/IUpdateBaseURI.sol:IRestrictedUpdateBaseURIV1
        if (interfaceID == 0x817234fa) return true;
        /// metadata/IContractMetadata.sol:IDelegatedMetadataV0
        if (interfaceID == 0xe8a3d485) return true;
        /// metadata/IContractMetadata.sol:IRestrictedMetadataV2
        if (interfaceID == 0x09feb698) return true;
        /// ownable/IOwnable.sol:IPublicOwnableV1
        if (interfaceID == 0x9e0a8b6e) return true;
        /// pausable/IPausable.sol:IDelegatedPausableV0
        if (interfaceID == 0x3ea4694c) return true;
        /// pausable/IPausable.sol:IRestrictedPausableV1
        if (interfaceID == 0x2745d444) return true;
        /// agreement/IAgreement.sol:IPublicAgreementV2
        if (interfaceID == 0x815af908) return true;
        /// agreement/IAgreement.sol:IDelegatedAgreementV1
        if (interfaceID == 0x6ccea0e2) return true;
        /// agreement/IAgreement.sol:IRestrictedAgreementV3
        if (interfaceID == 0xc0d72452) return true;
        /// primarysale/IPrimarySale.sol:IDelegatedPrimarySaleV0
        if (interfaceID == 0x079fe40e) return true;
        /// primarysale/IPrimarySale.sol:IRestrictedPrimarySaleV2
        if (interfaceID == 0x6f4f2837) return true;
        /// primarysale/IPrimarySale.sol:IRestrictedSFTPrimarySaleV0
        if (interfaceID == 0x29c49b9b) return true;
        /// royalties/IRoyalty.sol:IRestrictedOperatorFiltererV0
        if (interfaceID == 0xce8b3706) return true;
        /// royalties/IRoyalty.sol:IPublicOperatorFilterToggleV1
        if (interfaceID == 0x0a0a9c04) return true;
        /// royalties/IRoyalty.sol:IRestrictedOperatorFilterToggleV0
        if (interfaceID == 0x32f0cd64) return true;
        /// royalties/IPlatformFee.sol:IDelegatedPlatformFeeV0
        if (interfaceID == 0xd45573f6) return true;
        /// lazymint/ILazyMint.sol:IRestrictedLazyMintV1
        if (interfaceID == 0x47158264) return true;
        /// issuance/ISFTClaimCount.sol:IRestrictedSFTClaimCountV0
        if (interfaceID == 0x322d7e58) return true;
        /// issuance/ISFTSupply.sol:IDelegatedSFTSupplyV1
        if (interfaceID == 0x37f60105) return true;
        /// issuance/ISFTSupply.sol:IDelegatedSFTSupplyV0
        if (interfaceID == 0x78a38f7c) return true;
        /// issuance/ISFTLimitSupply.sol:IRestrictedSFTLimitSupplyV0
        if (interfaceID == 0x87198cf2) return true;
        /// issuance/ICedarSFTIssuance.sol:IPublicSFTIssuanceV4
        if (interfaceID == 0xb4c5faa1) return true;
        /// issuance/ICedarSFTIssuance.sol:IDelegatedSFTIssuanceV0
        if (interfaceID == 0x6f06d18b) return true;
        /// issuance/ICedarSFTIssuance.sol:IRestrictedSFTIssuanceV5
        if (interfaceID == 0xff121f21) return true;
        /// royalties/IRoyalty.sol:IDelegatedRoyaltyV0
        if (interfaceID == 0x4cc157df) return true;
        /// royalties/IRoyalty.sol:IRestrictedRoyaltyV0
        if (interfaceID == 0xfbc2afff) return true;
        /// baseURI/IUpdateBaseURI.sol:IDelegatedUpdateBaseURIV0
        if (interfaceID == 0x191b9515) return true;
        /// baseURI/IUpdateBaseURI.sol:IRestrictedUpdateBaseURIV0
        if (interfaceID == 0x817234fa) return true;
        /// metadata/IContractMetadata.sol:IRestrictedMetadataV1
        if (interfaceID == 0x938e3d7b) return true;
        /// metadata/IContractMetadata.sol:IRestrictedMetadataV0
        if (interfaceID == 0x938e3d7b) return true;
        /// pausable/IPausable.sol:IRestrictedPausableV0
        if (interfaceID == 0x2745d444) return true;
        /// primarysale/IPrimarySale.sol:IRestrictedPrimarySaleV1
        if (interfaceID == 0x6f4f2837) return true;
        /// lazymint/ILazyMint.sol:IRestrictedLazyMintV0
        if (interfaceID == 0x47158264) return true;
        /// Otherwise not supported
        return false;
    }

    function isIAspenFeaturesV1() override public pure returns (bool) {
        return true;
    }
}
