scalar UUID
scalar Time

directive @goModel(
	model: String
	models: [String!]
	forceGenerate: Boolean
) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION

directive @goField(
	forceResolver: Boolean
	name: String
	omittable: Boolean
) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION

directive @goTag(
	key: String!
	value: String
) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION

"""
Defines the queries available on the network.
"""
type Query {
    """
    Retrieves a list of networks based on provided criteria.
    """
    networks(
        networkId: Int, 
        name: String, 
        symbol: String, 
        suspended: Boolean, 
        maintenance: Boolean
    ): [Network!]!

    """
    Retrieves a list of contracts based on provided criteria.
    """

    contracts(
        networkIds: [Int!],
        blockNumbers: [Int!],
        blockHashes: [String!],
        transactionHashes: [String!],
        addresses: [String!],
        limit: Int,
        first: Int,
        after: String
    ): ContractConnection!   
}

schema {
    query: Query
    mutation: Mutations
}

"""
A representation of a blockchain smart contract and its associated metadata.
"""
type Contract {
    """
    The network information associated with this contract, detailing on which blockchain network the contract resides.
    """
    network: Network!

    """
    The blockchain address of the contract, serving as a unique identifier on the blockchain.
    """
    address: String!

    """
    The name of the contract, providing a human-readable identifier.
    """
    name: String!

    """
    The block number where the contract was deployed.
    """
    blockNumber: Int!

    """
    The hash of the block where the contract was deployed.
    """
    blockHash: String!

    """
    The hash of the transaction through which the contract was deployed.
    """
    transactionHash: String!

    """
    A list of standards that the contract claims to implement, e.g., ERC20, ERC721.
    """
    standards: [String!]

    """
    The software license of the contract source code, if available.
    """
    license: String

    """
    Indicates whether optimization was enabled during the contract's compilation.
    """
    optimized: Boolean!

    """
    The number of optimization runs performed if optimization was enabled.
    """
    optimizationRuns: Int!

    """
    Indicates if the contract is a proxy contract.
    """
    proxy: Boolean!

    """
    A list of addresses for contracts that are implementations of this proxy, if applicable.
    """
    implementations: [String!]

    """
    The contract's ABI (Application Binary Interface) as a JSON string.
    """
    abi: String

    """
    The bytecode executed during contract creation.
    """
    executionBytecode: String

    """
    The bytecode of the contract as deployed on the blockchain.
    """
    bytecode: String

    """
    The EVM (Ethereum Virtual Machine) version the contract was compiled for.
    """
    evmVersion: String

    """
    Indicates if the contract's source code has been verified.
    """
    verified: Boolean!

    """
    Indicates if the source code for the contract is available.
    """
    sourceAvailable: Boolean!

    """
    The provider from which the contract's sources were obtained, if available.
    """
    sourcesProvider: String

    """
    The provider used for verifying the contract's source code, if verification was performed.
    """
    verificationProvider: String

    """
    Indicates if the contract has been self-destructed.
    """
    selfDestructed: Boolean!

    """
    The version of the Solidity compiler used to compile this contract.
    """
    compilerVersion: String

    """
    The version of the Solgo compiler used, if applicable.
    """
    solgoVersion: String

    """
    The current processing state of the contract, indicating the stage in the contract's lifecycle.
    """
    currentState: String!

    """
    The next expected processing state of the contract, indicating the anticipated next step in processing.
    """
    nextState: String!

    """
    A list of states that have been completed in the processing of the contract, showing progress.
    """
    completedStates: [String!]!

    """
    A list of states that have failed during the processing of the contract, indicating errors or issues.
    """
    failedStates: [String!]!

    """
    Indicates if the processing of the contract has been completed.
    """
    completed: Boolean!

    """
    Indicates if the contract has been only partially processed, potentially due to errors or interruptions.
    """
    partial: Boolean!

    """
    The timestamp indicating when the contract data was initially created in the database.
    """
    createdAt: Time!

    """
    The timestamp indicating the last time the contract data was updated in the database.
    """
    updatedAt: Time!
}

"""
A connection to a list of contracts, providing pagination capabilities.
"""
type ContractConnection {
    """
    A list of contract edges, representing the contracts in this connection.
    """
    edges: [ContractEdge!]!

    """
    Metadata that provides information about the current page of results.
    """
    pageInfo: PageInfo!
}

"""
Represents an individual contract as part of a paginated list (connection).
"""
type ContractEdge {
    """
    The actual contract data.
    """
    node: Contract!

    """
    A unique identifier used for pagination, marking the position of this contract in the overall list.
    """
    cursor: String!
}


"""
Request Input type for specifying a contract address and its corresponding network ID for unpacking.
"""
input ContractUnpackRequest {
    """
    The blockchain address of the contract to be unpacked.
    """
    address: String!

    """
    The ID of the network where the contract resides.
    """
    networkId: Int!
}

"""
Mutation to submit one or more contracts for unpacking based on their addresses and network IDs.
After unpacking, it returns a connection to the affected or related contracts, allowing for pagination and further inspection.
"""
type Mutations {
    """
    Submits a list of contracts identified by their addresses and network IDs for unpacking.
    After the process, it provides access to a paginated list of contracts that were impacted or are relevant to the unpacking operation.
    """
    unpack(contract: ContractUnpackRequest!): Contract!
}

"""
A representation of a network with its essential details.
"""
type Network {
    """
    Official (chain) ID of the network.
    """
    networkId: Int!
    
    """
    Name of the network.
    """
    name: String!
    
    """
    Official or recognized name of the network.
    """
    canonicalName: String!
    
    """
    Short symbol representation of the network.
    """
    symbol: String!
    
    """
    Website URL of the network.
    """
    website: String!
    
    """
    Flag indicating if the network is suspended.
    """
    suspended: Boolean!
    
    """
    Flag indicating if the network is under maintenance.
    """
    maintenance: Boolean!
}


"""
Information about pagination in a connection.
"""
type PageInfo {
    """
    Indicates if there are more items following the current set.
    """
    hasNextPage: Boolean!

    """
    Indicates if there are more items preceding the current set.
    """
    hasPreviousPage: Boolean!

    """
    The cursor for the first item in the current set.
    """
    startCursor: String!

    """
    The cursor for the last item in the current set.
    """
    endCursor: String!
}


